<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.sys.dao.MemberWithdrawMapper">
  <resultMap id="BaseResultMap" type="com.lb.member.model.MemberWithdraw">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="user_type" jdbcType="TINYINT" property="userType" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="amount" jdbcType="REAL" property="amount" />
    <result column="account_Id" jdbcType="VARCHAR" property="accountId" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="apply_time" jdbcType="TIMESTAMP" property="applyTime" />
    <result column="operate_uid" jdbcType="BIGINT" property="operateUid" />
    <result column="operate_ip" jdbcType="VARCHAR" property="operateIp" />
    <result column="operate_user" jdbcType="VARCHAR" property="operateUser" />
    <result column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
    <result column="pay_type" jdbcType="TINYINT" property="payType" />
    <result column="info" jdbcType="VARCHAR" property="info" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    id, order_id, uid, user_type, user_name, name, amount, account_Id, account, account_name, 
    state, apply_time, operate_uid, operate_ip, operate_user, operate_time, pay_type, 
    info
  </sql>
  <select id="selectByExample" parameterType="com.lb.member.model.MemberWithdrawExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    select 
    <include refid="Base_Column_List" />
    from member_withdraw
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    delete from member_withdraw
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lb.member.model.MemberWithdrawExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    delete from member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lb.member.model.MemberWithdraw">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    insert into member_withdraw (id, order_id, uid, 
      user_type, user_name, name, 
      amount, account_Id, account, 
      account_name, state, apply_time, 
      operate_uid, operate_ip, operate_user, 
      operate_time, pay_type, info
      )
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, #{uid,jdbcType=INTEGER}, 
      #{userType,jdbcType=TINYINT}, #{userName,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{amount,jdbcType=REAL}, #{accountId,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, 
      #{accountName,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, #{applyTime,jdbcType=TIMESTAMP}, 
      #{operateUid,jdbcType=BIGINT}, #{operateIp,jdbcType=VARCHAR}, #{operateUser,jdbcType=VARCHAR}, 
      #{operateTime,jdbcType=TIMESTAMP}, #{payType,jdbcType=TINYINT}, #{info,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lb.member.model.MemberWithdraw">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    insert into member_withdraw
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="userType != null">
        user_type,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="accountId != null">
        account_Id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="accountName != null">
        account_name,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="applyTime != null">
        apply_time,
      </if>
      <if test="operateUid != null">
        operate_uid,
      </if>
      <if test="operateIp != null">
        operate_ip,
      </if>
      <if test="operateUser != null">
        operate_user,
      </if>
      <if test="operateTime != null">
        operate_time,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="info != null">
        info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="userType != null">
        #{userType,jdbcType=TINYINT},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=REAL},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="applyTime != null">
        #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateUid != null">
        #{operateUid,jdbcType=BIGINT},
      </if>
      <if test="operateIp != null">
        #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateUser != null">
        #{operateUser,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=TINYINT},
      </if>
      <if test="info != null">
        #{info,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lb.member.model.MemberWithdrawExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    select count(*) from member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    update member_withdraw
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.userType != null">
        user_type = #{record.userType,jdbcType=TINYINT},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=REAL},
      </if>
      <if test="record.accountId != null">
        account_Id = #{record.accountId,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.accountName != null">
        account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.applyTime != null">
        apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operateUid != null">
        operate_uid = #{record.operateUid,jdbcType=BIGINT},
      </if>
      <if test="record.operateIp != null">
        operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      </if>
      <if test="record.operateUser != null">
        operate_user = #{record.operateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.operateTime != null">
        operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payType != null">
        pay_type = #{record.payType,jdbcType=TINYINT},
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    update member_withdraw
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      uid = #{record.uid,jdbcType=INTEGER},
      user_type = #{record.userType,jdbcType=TINYINT},
      user_name = #{record.userName,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=REAL},
      account_Id = #{record.accountId,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR},
      account_name = #{record.accountName,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=TINYINT},
      apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      operate_uid = #{record.operateUid,jdbcType=BIGINT},
      operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      operate_user = #{record.operateUser,jdbcType=VARCHAR},
      operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      pay_type = #{record.payType,jdbcType=TINYINT},
      info = #{record.info,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lb.member.model.MemberWithdraw">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    update member_withdraw
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="userType != null">
        user_type = #{userType,jdbcType=TINYINT},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=REAL},
      </if>
      <if test="accountId != null">
        account_Id = #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null">
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="applyTime != null">
        apply_time = #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateUid != null">
        operate_uid = #{operateUid,jdbcType=BIGINT},
      </if>
      <if test="operateIp != null">
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateUser != null">
        operate_user = #{operateUser,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        operate_time = #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lb.member.model.MemberWithdraw">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 22 15:06:14 CST 2017.
    -->
    update member_withdraw
    set order_id = #{orderId,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=INTEGER},
      user_type = #{userType,jdbcType=TINYINT},
      user_name = #{userName,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=REAL},
      account_Id = #{accountId,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      apply_time = #{applyTime,jdbcType=TIMESTAMP},
      operate_uid = #{operateUid,jdbcType=BIGINT},
      operate_ip = #{operateIp,jdbcType=VARCHAR},
      operate_user = #{operateUser,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      pay_type = #{payType,jdbcType=TINYINT},
      info = #{info,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="queryMemberWithdrawList" resultType="map" parameterType="map" >
	SELECT * FROM (  
   		SELECT 
	    	m.id AS id,
			m.order_id AS orderId,
			m.uid AS uid,
			m.user_name AS userName,
			m.name,
			m.amount AS amount,
			m.account_Id AS accountId,
			right(m.account, 10) AS account,
			m.account_name AS accountName,
			m.state AS state,
			m.apply_time AS applyTime,
			m.operate_uid AS operateUid,
			m.operate_ip AS operateIp,
			m.operate_user AS operateUser,
			m.operate_time AS operateTime,
			m.pay_type AS payType,
			m.info AS info,
			getItemName("WState",state) AS stateName,
			getItemName("PayType",pay_type) AS payName
	    from  
	    	ls.`member_withdraw` m
	   <if test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
	   	UNION ALL 
		select 
	    	his.id AS id,
			his.order_id AS orderId,
			his.uid AS uid,
			his.user_name AS userName,
			his.name,
			his.amount AS amount,
			his.account_Id AS accountId,			
			right(his.account, 10) AS account,
			his.account_name AS accountName,
			his.state AS state,
			his.apply_time AS applyTime,
			his.operate_uid AS operateUid,
			his.operate_ip AS operateIp,
			his.operate_user AS operateUser,
			his.operate_time AS operateTime,
			his.pay_type AS payType,
			his.info AS info,
			getItemName("WState",state) AS stateName,
			getItemName("PayType",pay_type) AS payName
	    from  
	    	lshistory.`member_withdraw_his` his
	   </if>
	  ) m
	    
    LEFT JOIN user_info AS u ON m.uid = u.UID
     where 1=1
	  <if test="orderId != null and orderId !=''">
        and m.orderId LIKE CONCAT(CONCAT('%',#{orderId}),'%')
      </if>
	  <if test="agentCount != null and agentCount !=''">
	  	and u.AGENT_COUNT LIKE CONCAT(CONCAT('%',#{agentCount}),'%')
      </if>
	  <if test="VIP_ID != null and VIP_ID !=''">
        and u.VIP_ID  = #{VIP_ID}
      </if>
      <if test="userName != null and userName !=''">
        and m.userName LIKE CONCAT(CONCAT('%',#{userName}),'%')
      </if>
      <if test="name != null and name !=''">
        and m.name = #{name,jdbcType=VARCHAR}
      </if>
      <if test="state != null and state !=''">
        and m.state = #{state,jdbcType=TINYINT}
      </if>
      <if test="startTime != null and startTime != ''">
		and m.applyTime <![CDATA[>=]]> #{startTime}
	  </if>
      <if test="endTime != null and endTime != ''">
	    and m.applyTime <![CDATA[<=]]> #{endTime}
      </if>
	  <if test="operateUser != null and operateUser != ''">
	    and m.operateUser  LIKE CONCAT(CONCAT('%',#{operateUser}),'%')
      </if>
	   <if test="min_coin != null and min_coin != ''">
		and m.amount <![CDATA[>=]]> #{min_coin}
	  </if>
      <if test="max_coin != null and max_coin != ''">
	    and m.amount <![CDATA[<=]]> #{max_coin}
      </if>
      <if test="withdrawOperateType != null and withdrawOperateType !=''">
        and m.withdraw_operate_type = #{withdrawOperateType,jdbcType=TINYINT}
      </if>
      <if test="payType != null  and payType !=''">
        and m.pay_type = #{payType,jdbcType=TINYINT}
      </if>
      <if test="orderState != null and orderState != '' and orderState == 1">
        and (m.state = 1 or m.state = 2)
      </if>
      ORDER BY m.state, m.applyTime, m.operateTime DESC
	
  </select>
  <!-- 按条件导出 -->
  <select id="exportWithdrawRecord" resultType="com.lb.download.model.WithdrawRecord" parameterType="map" >
  			select 
		    	m.order_id AS orderId,
				m.user_name AS userName,
				m.user_type as userType,
				m.amount AS amount,
				m.account_Id AS accountId,
				m.account AS account,
				m.account_name AS accountName,
				m.apply_time AS applyTime,
				m.operate_user AS operateUser,
				m.operate_time AS operateTime,
				m.info AS info,
				getItemName("WState",state) AS stateName
		    from 
		    <choose>
				<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
					lshistory.`member_withdraw_his` m
				</when>
				<otherwise>
					ls.`member_withdraw` m
				</otherwise>
			</choose>
		    LEFT JOIN user_info AS u ON m.uid = u.UID
		     where 1=1
			  <if test="orderId != null and orderId !=''">
		        and m.order_id LIKE CONCAT(CONCAT('%',#{orderId}),'%')
		      </if>
			  <if test="agentCount != null and agentCount !=''">
		        and u.AGENT_COUNT=#{agentCount}
		      </if>
		      <if test="userName != null and userName !=''">
		        and m.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		      </if>
		      <if test="userType != null and userType !=''">
		        and m.user_type = #{userType}
		      </if>
		      <if test="name != null and name !=''">
		        and m.name = #{name,jdbcType=VARCHAR}
		      </if>
		      <if test="state != null and state !=''">
		        and m.state = #{state,jdbcType=TINYINT}
		      </if>
		      <if test="startTime != null and startTime != ''">
				and m.apply_time <![CDATA[>=]]> #{startTime}
			  </if>
		      <if test="endTime != null and endTime != ''">
			    and m.apply_time <![CDATA[<=]]> #{endTime}
		      </if>
		      <if test="withdrawOperateType != null and withdrawOperateType !=''">
		        and m.withdraw_operate_type = #{withdrawOperateType,jdbcType=TINYINT}
		      </if>
		      <if test="payType != null  and payType !=''">
		        and m.pay_type = #{payType,jdbcType=TINYINT}
		      </if>
		      ORDER BY m.state,m.apply_time DESC,m.operate_time DESC
	   <!-- <choose>
	     查询代理提现
	   	<when test="userType == 1">
	   		select 
		    	m.order_id AS orderId,
				m.user_name AS userName,
				m.user_type as userType,
				m.amount AS amount,
				m.account_Id AS accountId,
				m.account AS account,
				m.account_name AS accountName,
				m.apply_time AS applyTime,
				m.operate_user AS operateUser,
				m.operate_time AS operateTime,
				m.info AS info,
				getItemName("WState",state) AS stateName
			from 
			<choose>
				<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
					lshistory.`member_withdraw_his` m
				</when>
				<otherwise>
					ls.`member_withdraw` m
				</otherwise>
			</choose>
				LEFT JOIN proxy_info AS p ON m.uid  = p.id
			WHERE m.user_type = 1
			  <if test="orderId != null and orderId !=''">
		        and m.order_id LIKE CONCAT(CONCAT('%',#{orderId}),'%')
		      </if>
		      <if test="agentCount != null and agentCount !=''">
		        and FIND_IN_SET(p.id, getProxyIdsByAcount(#{agentCount}))
		      </if>
		      <if test="userName != null and userName !=''">
		        and m.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		      </if>
		      <if test="name != null and name !=''">
		        and m.name = #{name,jdbcType=VARCHAR}
		      </if>
		      <if test="state != null and state !=''">
		        and m.state = #{state,jdbcType=TINYINT}
		      </if>
		      <if test="startTime != null and startTime != ''">
				and m.apply_time <![CDATA[>=]]> #{startTime}
			  </if>
		      <if test="endTime != null and endTime != ''">
			    and m.apply_time <![CDATA[<=]]> #{endTime}
		      </if>
		      <if test="withdrawOperateType != null and withdrawOperateType !=''">
		        and m.withdraw_operate_type = #{withdrawOperateType,jdbcType=TINYINT}
		      </if>
		      <if test="payType != null  and payType !=''">
		        and m.pay_type = #{payType,jdbcType=TINYINT}
		      </if>
		      ORDER BY m.state,m.apply_time DESC,m.operate_time DESC
	   	</when>
	   	  查询会员提现
	   	<otherwise>
	   		 select 
		    	m.order_id AS orderId,
				m.user_name AS userName,
				m.user_type as userType,
				m.amount AS amount,
				m.account_Id AS accountId,
				m.account AS account,
				m.account_name AS accountName,
				m.apply_time AS applyTime,
				m.operate_user AS operateUser,
				m.operate_time AS operateTime,
				m.info AS info,
				getItemName("WState",state) AS stateName
		    from 
		    <choose>
				<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
					lshistory.`member_withdraw_his` m
				</when>
				<otherwise>
					ls.`member_withdraw` m
				</otherwise>
			</choose>
		    LEFT JOIN user_info AS u ON m.uid = u.UID
		     where 1=1
			  <if test="orderId != null and orderId !=''">
		        and m.order_id LIKE CONCAT(CONCAT('%',#{orderId}),'%')
		      </if>
			  <if test="agentCount != null and agentCount !=''">
		        and u.AGENT_COUNT=#{agentCount}
		      </if>
		      <if test="userName != null and userName !=''">
		        and m.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		      </if>
		      <if test="userType != null and userType !=''">
		        and m.user_type = #{userType}
		      </if>
		      <if test="name != null and name !=''">
		        and m.name = #{name,jdbcType=VARCHAR}
		      </if>
		      <if test="state != null and state !=''">
		        and m.state = #{state,jdbcType=TINYINT}
		      </if>
		      <if test="startTime != null and startTime != ''">
				and m.apply_time <![CDATA[>=]]> #{startTime}
			  </if>
		      <if test="endTime != null and endTime != ''">
			    and m.apply_time <![CDATA[<=]]> #{endTime}
		      </if>
		      <if test="withdrawOperateType != null and withdrawOperateType !=''">
		        and m.withdraw_operate_type = #{withdrawOperateType,jdbcType=TINYINT}
		      </if>
		      <if test="payType != null  and payType !=''">
		        and m.pay_type = #{payType,jdbcType=TINYINT}
		      </if>
		      ORDER BY m.state,m.apply_time DESC,m.operate_time DESC
	   	</otherwise>
	   </choose> -->
   </select>
   <select id="queryById" resultType="map" parameterType="map" >
    select 
    	m.id AS id,
		m.order_id AS orderId,
		m.uid AS uid,
		m.user_name AS userName,
		m.name,
		m.user_type as userType,
		m.amount AS amount,
		m.account_Id AS accountId,
		m.account AS account,
		m.account_name AS accountName,
		m.state AS state,
		m.apply_time AS applyTime,
		m.operate_uid AS operateUid,
		m.operate_ip AS operateIp,
		m.operate_user AS operateUser,
		m.operate_time AS operateTime,
		m.pay_type AS payType,
		m.info AS info,
		m.AGENT_AMOUNT AS agentAmount,
		getItemName("WState",state) AS stateName,
		getItemName("PayType",pay_type) AS payName
    from 
    <choose>
		<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
			lshistory.`member_withdraw_his` m
		</when>
		<otherwise>
			ls.`member_withdraw` m
		</otherwise>
	</choose>
    where m.id=#{id}
  </select>
  
  <select id="queryMemberWithdrawDate" resultType="map" parameterType="map" >
   	SELECT 
	  	 IFNULL(sum(case when t.state=3 then 1 else 0 end),0) as withdrawSum,
		 IFNULL(sum(case when t.state=3 then t.amount else 0 end),0.00) as withdrawAmountSum
	 FROM member_withdraw  t 
	 WHERE 1=1
	  <if test="userType != null and userType !=''">
        and t.user_type = #{userType}
      </if>
      <if test="userName != null and userName !=''">
        and t.user_name = #{userName,jdbcType=VARCHAR}
      </if>
  </select>
<!--   查詢流水倍數 -->
  <select id="queryStreamMultiple" resultType="string"  >
   	SELECT
		sys_config1
		FROM
		sys_configure
	WHERE
		on_off = 1 AND
		configure = "drawRunTimes"
  </select>
  <select id="withdrawQuery" resultType="map" parameterType="map" >
   <!-- 	<if test="userType == 2"> -->
	   	select 
	    	m.id AS id,
				m.order_id AS orderId,
				m.uid AS uid,
				m.user_name AS userName,
				m.name,
				m.user_type as userType,
				m.amount AS amount,
				m.account_Id AS accountId,
				m.account AS account,
				m.account_name AS accountName,
				m.state AS state,
				m.apply_time AS applyTime,
				m.operate_uid AS operateUid,
				m.operate_ip AS operateIp,
				m.operate_user AS operateUser,
				m.operate_time AS operateTime,
				m.pay_type AS payType,
				m.info AS info,
				getItemName("WState",state) AS stateName,
				getItemName("PayType",pay_type) AS payName,
				( (SELECT 
					   IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
				  	FROM member_deposit  as t where  t.uid  = m.uid ) +
				  ( SELECT 
					   IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
				  FROM lshistory.member_deposit_his  as t where  t.uid  = m.uid ) ) as depositSum,
				( (SELECT 
						 IFNULL(sum(case when t.deposit_operate_type=2 and t.state=3 then 1 else 0 end),0)  
						FROM member_deposit  as t  where  t.uid  = m.uid )+
				  (SELECT 
						 IFNULL(sum(case when t.deposit_operate_type=2 and t.state=3 then 1 else 0 end),0)  
					FROM lshistory.member_deposit_his  as t  where  t.uid  = m.uid ) )as depositRGSum	,
				( (SELECT 				
						 IFNULL(sum(case when t.state=3 then t.amount else 0 end),0.00)  
					FROM member_deposit  as t  where  t.uid  = m.uid ) +
					(SELECT 				
						 IFNULL(sum(case when t.state=3 then t.amount else 0 end),0.00)  
					FROM lshistory.member_deposit_his  as t  where  t.uid  = m.uid ) )as depositAmountSum,
				( (SELECT 				 
						 IFNULL(sum(case when t.deposit_operate_type=2 and t.state=3 then t.amount else 0 end),0.00)  
					FROM member_deposit  as t  where  t.uid  = m.uid )+
				  (SELECT 				 
						 IFNULL(sum(case when t.deposit_operate_type=2 and t.state=3 then t.amount else 0 end),0.00)  
					FROM lshistory.member_deposit_his  as t  where  t.uid  = m.uid ) ) as depositAmountRGSum,
				( (SELECT 
						 IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
					 FROM member_withdraw  t where t.uid  = m.uid and t.user_type=m.user_type)+
				  (SELECT 
						 IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
					 FROM lshistory.member_withdraw_his  t where t.uid  = m.uid and t.user_type=m.user_type) ) as withdrawSum,
				( (SELECT 
						 IFNULL(sum(case when t.state=3 then t.amount else 0.00 end),0.00) 
					FROM member_withdraw  t where t.uid  = m.uid and t.user_type=m.user_type)+
				  (SELECT 
						 IFNULL(sum(case when t.state=3 then t.amount else 0.00 end),0.00) 
					FROM lshistory.member_withdraw_his  t where t.uid  = m.uid and t.user_type=m.user_type) ) as withdrawAmountSum,
				u.reg_time as regTime,
				u.betsum as betsum,
				<!-- ( SELECT reg_time  from user_info u where u.UID  = m.uid  ) as regTime,
				( SELECT betsum  from user_info u where u.UID  = m.uid  ) as betsum, -->
				(SELECT
						IFNULL(sys_config1,0.00)
						FROM
						sys_configure
					WHERE
						on_off = 1 AND
						configure = "drawRunTimes") as streamMultiple,
				u.WITHDRAW_NEEDSUM  as betsumNeed,
				u.STATUS  as status,
				if((u.WITHDRAW_NEEDSUM-u.betsum)<![CDATA[>=]]>0,'是','否') as isWithdraw <!-- 判断是否可以提现 -->
    		from member_withdraw AS m 
    			LEFT JOIN user_info u ON u.UID=m.uid
    		where m.id=#{id}
    	<!-- </if>
    	<if test="userType ==1"> -->
	    	<!-- select 
	    		m.id AS id,
				m.order_id AS orderId,
				m.uid AS uid,
				m.user_name AS userName,
				m.name,
				m.user_type as userType,
				m.amount AS amount,
				m.account_Id AS accountId,
				m.account AS account,
				m.account_name AS accountName,
				m.state AS state,
				m.apply_time AS applyTime,
				m.operate_uid AS operateUid,
				m.operate_ip AS operateIp,
				m.operate_user AS operateUser,
				m.operate_time AS operateTime,
				m.pay_type AS payType,
				m.info AS info,
				getItemName("WState",state) AS stateName,
				getItemName("PayType",pay_type) AS payName,
				(	(SELECT 
						 IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
					 FROM member_withdraw  t where t.uid  = m.uid and t.user_type=m.user_type)+
					(SELECT 
						 IFNULL(sum(case when t.state=3 then 1 else 0 end),0) 		
					 FROM lshistory.member_withdraw_his  t where t.uid  = m.uid and t.user_type=m.user_type) ) as withdrawSum,
				(	(SELECT 
						 IFNULL(sum(case when t.state=3 then t.amount else 0.00 end),0.00) 
					FROM member_withdraw  t where t.uid  = m.uid and t.user_type=m.user_type) +
					(SELECT 
						 IFNULL(sum(case when t.state=3 then t.amount else 0.00 end),0.00) 
					FROM lshistory.member_withdraw_his  t where t.uid  = m.uid and t.user_type=m.user_type) )as withdrawAmountSum,
				( SELECT reg_time  from proxy_info p where p.id  = m.uid  ) as regTime,
				( SELECT rebate_ratio  from proxy_info p where p.id  = m.uid  ) as rebateRatio,
				( SELECT	
						IFNULL(SUM(IF(cl.coin_operate_type=11 and cl.coin<![CDATA[>]]>0,1,0)),0) 
					FROM coin_log cl where cl.user_type=m.user_type and cl.uid =m.uid ) as rebateRatioCount,
				( SELECT	
						IFNULL(SUM(IF(cl.coin_operate_type=11,cl.coin,0)),0.00) 
					FROM coin_log cl where cl.user_type=m.user_type and cl.uid =m.uid ) as rebateRatioCoin,
				p.status
	   		 from member_withdraw AS m 
	   		 LEFT JOIN proxy_info p ON p.id=m.uid
	   		 where m.id=#{id}
    	</if> -->
  </select>
  <select id="withdrawUserInfo" resultType="map" parameterType="map" >
   <!-- 	<if test="userType == 2"> -->
	   	SELECT
			u.UID,
			u.`USER_NAME` AS userName,
			u.USERTYPE AS userType,
			u.name AS fullName,
			u.COIN as coin,
			u.AGENT_COUNT AS proxyName,
			u.VIP_ID AS vipId,
			u.REG_TIME AS regTime,
			u.remark as info,
			v.vipName,
			u.status,
			u.PHONE_NUMBER as phoneNumber,
			u.qq,
			u.weixin,
			u.email,
			u.BANK_ACCOUNT AS bankAccount,
			u.BANK_NAME as bankName,
			u.BANK_ADDRESS as bankAddress,
			u.betsum,
			u.BANK_BLACKLIST_STATUS as bankBlacklistStatus,
			u.REG_IP as regIp,
			u.source,
			u.score,
			u.REG_SYSTEM as regSystem,
			u.WITHDRAW_NEEDSUM  as betsumNeed,
			u.CHANNEL as channel,
			u.LAST_LOGIN_TIME as lastLoginTime,
			(SELECT user_info.user_name FROM user_info WHERE user_info.uid=u.parent_id) AS parentName
		FROM
			user_info AS u
			LEFT JOIN user_vip_info v ON u.`VIP_ID`=v.`vipId`
		WHERE
			u.USER_NAME=#{userName}

    	<!-- </if>
    	<if test="userType ==1">
	    	SELECT
				p.login_account AS userName,
				p.proxy_name AS fullName,
				p.coin,	
				p.REG_TIME AS regTime,
				p.status,
				p.tell as phoneNumber,
				p.qq,
				p.weixin,
				p.email,
				p.bank_account AS bankAccount,
				p.bank_name as bankName,
				p.bank_address as bankAddress,
				p.rebate_ratio as rebateRatio,
				p.reg_ip as regIp,
				p.last_login_time as lastLoginTime,
				pin.login_account AS parentName
			FROM proxy_info AS p 
				LEFT JOIN proxy_info pin on p.pid=pin.id
			WHERE p.login_account=#{userName}
    	</if> -->
  </select>
  <!-- 更改提款信息状态 -->
	<update id="updateDrawingInfoState" parameterType="map">
 		UPDATE 
			ls.`member_withdraw` mw
		SET 
			mw.`state`=#{state},
			<if test="remark != null and remark != ''">
				mw.`info`=#{remark},
			</if>
			mw.`operate_time`=NOW()
		WHERE
			mw.`id`=#{id}
			AND mw.`operate_uid`=#{userId}
			AND mw.`state`=2
	</update>
	<!-- 更改会员或者代理金额 -->
	<update id="updateUserCoinInfo" parameterType="map">
		UPDATE user_info ui
		SET
			<choose>
				<when test="operateType == 1">
					<if test="userType != null and userType == 1">
						ui.`AGENT_COIN` = ui.`AGENT_COIN` + #{agentAmount},
					</if>
					ui.`FCION`=ui.`FCION`-#{amount},
					ui.`TODAYS_WITHDRAW_TIMES`= IF(TO_DAYS(LAST_WITHDRAW_DATE)=TO_DAYS(NOW()),TODAYS_WITHDRAW_TIMES - 1,0)
				</when>
				<otherwise>
					`COIN`=`COIN`-#{amount},
					`FCION`=`FCION`-#{amount}
				</otherwise>
			</choose>
		WHERE ui.`UID`=#{uid}
	</update>
	<!-- 增加资金明细记录 -->
	<insert id="addUserCoinLog" parameterType="map">
		INSERT INTO ls.`coin_log`(
			<if test="orderId != null">
				`order_id`,
			</if>
			`user_type`,
			`uid`,
			`user_name`,
			`coin`,
			`userCoin`,
			`coin_before`,
			`fcoin`,
			`coin_operate_type`
			<if test="operateIp != null">
				,`operate_ip`
			</if>
			<if test="userId != null">
				,`operate_uid`
			</if>
			<if test="sysUserName != null">
				,`operate_user`
			</if>
			<if test="remark != null">
				,`info`
			</if>
			)
			SELECT 
			<if test="orderId != null">
				#{orderId},
			</if>
				#{userType},
			<!-- <choose>
				<when test="userType == 1">
					ui.`id`,
					ui.`login_account`,
					#{amount},
					ui.`coin`,
					ui.`coin`+#{amount},
					0,
				</when>
				<otherwise> -->
					ui.`UID`,
					ui.`USER_NAME`,
					#{amount},
					ui.`COIN`,
					ui.`COIN`+#{amount},
					ui.`FCION`,
				<!-- </otherwise>
			</choose> -->
				2
				<if test="operateIp != null">
					,#{operateIp}
				</if>
				<if test="userId != null">
					,#{userId}
				</if>
				<if test="sysUserName != null">
					,#{sysUserName}
				</if>
				<if test="remark != null">
					,#{remark}
				</if>
			FROM 
			<!-- <choose>
				<when test="userType == 1">
					ls.`proxy_info` ui 
					WHERE ui.`id`=#{uid}
				</when>
				<otherwise> -->
					ls.`user_info` ui
					WHERE ui.`UID`=#{uid}
				<!-- </otherwise>
			</choose> -->
	</insert>
	<!-- 在会员有注册金额赠送以及推荐奖励时，需要插入打码量变动记录 -->
	<insert id="insertBetsumLog" parameterType="map">
		INSERT INTO betsum_log(
			 `uid`,
			 `user_name`,
			 `betsum_amount`,
			 `user_betsum`,
			 `betsum_before`,
			 `betsum_operate_type`,
			 `operate_time`,
			<if test="operateIp != null">
				`operate_ip`,
			</if>
			<if test="userId != null">
				 `operate_uid`,
			</if>
			<if test="sysUserName != null">
				`operate_user`,
			</if>
			 `info`
			)
			SELECT
				#{uid},
				#{userName},
				WITHDRAW_NEEDSUM,
				0,
				WITHDRAW_NEEDSUM,
				#{betsumOperateType},
				NOW(),
				<if test="operateIp != null">
				#{operateIp},
				</if>
				<if test="userId != null">
				#{userId},
				</if>
				<if test="sysUserName != null">
				#{sysUserName},
				</if>
				#{info}
			  FROM 
			  	user_info
			  WHERE 
			  	`UID`=#{uid} AND `WITHDRAW_NEEDSUM`&gt;0
	</insert>
	<insert id="manualWithDraw" parameterType="map">
		INSERT INTO member_withdraw
			(
				account_id,account,account_name,order_id,uid,user_type,user_name,name,amount,state,operate_uid,operate_ip,operate_user,operate_time,info
			)
		VALUES
			(
				
				#{bankName},#{bankAccount},#{bankAddress},#{order_id},#{uid},#{user_type},#{user_name},#{name},#{amount},#{state},#{operate_uid},#{operate_ip},#{operate_user},now(),#{info}
			)
	</insert>
</mapper>