<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.sys.dao.MemberDepositMapper">
  <resultMap id="BaseResultMap" type="com.lb.member.model.MemberDeposit">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="recharge_amount" jdbcType="REAL" property="rechargeAmount" />
    <result column="apply_time" jdbcType="TIMESTAMP" property="applyTime" />
    <result column="amount" jdbcType="REAL" property="amount" />
    <result column="coin" jdbcType="REAL" property="coin" />
    <result column="fcoin" jdbcType="REAL" property="fcoin" />
    <result column="account_id" jdbcType="VARCHAR" property="accountId" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="operate_ip" jdbcType="VARCHAR" property="operateIp" />
    <result column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
    <result column="operate_uid" jdbcType="BIGINT" property="operateUid" />
    <result column="operate_user" jdbcType="VARCHAR" property="operateUser" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="info" jdbcType="VARCHAR" property="info" />
    <result column="flag" jdbcType="TINYINT" property="flag" />
    <result column="pay_id" jdbcType="VARCHAR" property="payId" />
    <result column="pay_type" jdbcType="TINYINT" property="payType" />
    <result column="deposit_operate_type" jdbcType="TINYINT" property="depositOperateType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    id, order_id, uid, user_name, name, recharge_amount, apply_time, amount, coin, fcoin, 
    account_id, account, account_name, operate_ip, operate_time, operate_uid, operate_user, 
    state, info, flag, pay_id, pay_type, deposit_operate_type
  </sql>
  <select id="selectByExample" parameterType="com.lb.member.model.MemberDepositExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    select 
    <include refid="Base_Column_List" />
    from member_deposit
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    delete from member_deposit
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lb.member.model.MemberDepositExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    delete from member_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lb.member.model.MemberDeposit">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    insert into member_deposit (id, order_id, uid, 
      user_name, name, recharge_amount, 
      apply_time, amount, coin, 
      fcoin, account_id, account, 
      account_name, operate_ip, operate_time, 
      operate_uid, operate_user, state, 
      info, flag, pay_id, 
      pay_type, deposit_operate_type)
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, #{uid,jdbcType=INTEGER}, 
      #{userName,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{rechargeAmount,jdbcType=REAL}, 
      #{applyTime,jdbcType=TIMESTAMP}, #{amount,jdbcType=REAL}, #{coin,jdbcType=REAL}, 
      #{fcoin,jdbcType=REAL}, #{accountId,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, 
      #{accountName,jdbcType=VARCHAR}, #{operateIp,jdbcType=VARCHAR}, #{operateTime,jdbcType=TIMESTAMP}, 
      #{operateUid,jdbcType=BIGINT}, #{operateUser,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, 
      #{info,jdbcType=VARCHAR}, #{flag,jdbcType=TINYINT}, #{payId,jdbcType=VARCHAR}, 
      #{payType,jdbcType=TINYINT}, #{depositOperateType,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.lb.member.model.MemberDeposit">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    insert into member_deposit
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="rechargeAmount != null">
        recharge_amount,
      </if>
      <if test="applyTime != null">
        apply_time,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="coin != null">
        coin,
      </if>
      <if test="fcoin != null">
        fcoin,
      </if>
      <if test="accountId != null">
        account_id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="accountName != null">
        account_name,
      </if>
      <if test="operateIp != null">
        operate_ip,
      </if>
      <if test="operateTime != null">
        operate_time,
      </if>
      <if test="operateUid != null">
        operate_uid,
      </if>
      <if test="operateUser != null">
        operate_user,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="info != null">
        info,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="payId != null">
        pay_id,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="depositOperateType != null">
        deposit_operate_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="rechargeAmount != null">
        #{rechargeAmount,jdbcType=REAL},
      </if>
      <if test="applyTime != null">
        #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=REAL},
      </if>
      <if test="coin != null">
        #{coin,jdbcType=REAL},
      </if>
      <if test="fcoin != null">
        #{fcoin,jdbcType=REAL},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="operateIp != null">
        #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateUid != null">
        #{operateUid,jdbcType=BIGINT},
      </if>
      <if test="operateUser != null">
        #{operateUser,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="info != null">
        #{info,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=TINYINT},
      </if>
      <if test="payId != null">
        #{payId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=TINYINT},
      </if>
      <if test="depositOperateType != null">
        #{depositOperateType,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lb.member.model.MemberDepositExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    select count(*) from member_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    update member_deposit
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.rechargeAmount != null">
        recharge_amount = #{record.rechargeAmount,jdbcType=REAL},
      </if>
      <if test="record.applyTime != null">
        apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=REAL},
      </if>
      <if test="record.coin != null">
        coin = #{record.coin,jdbcType=REAL},
      </if>
      <if test="record.fcoin != null">
        fcoin = #{record.fcoin,jdbcType=REAL},
      </if>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.accountName != null">
        account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.operateIp != null">
        operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      </if>
      <if test="record.operateTime != null">
        operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.operateUid != null">
        operate_uid = #{record.operateUid,jdbcType=BIGINT},
      </if>
      <if test="record.operateUser != null">
        operate_user = #{record.operateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=TINYINT},
      </if>
      <if test="record.payId != null">
        pay_id = #{record.payId,jdbcType=VARCHAR},
      </if>
      <if test="record.payType != null">
        pay_type = #{record.payType,jdbcType=TINYINT},
      </if>
      <if test="record.depositOperateType != null">
        deposit_operate_type = #{record.depositOperateType,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    update member_deposit
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      uid = #{record.uid,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      recharge_amount = #{record.rechargeAmount,jdbcType=REAL},
      apply_time = #{record.applyTime,jdbcType=TIMESTAMP},
      amount = #{record.amount,jdbcType=REAL},
      coin = #{record.coin,jdbcType=REAL},
      fcoin = #{record.fcoin,jdbcType=REAL},
      account_id = #{record.accountId,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR},
      account_name = #{record.accountName,jdbcType=VARCHAR},
      operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      operate_uid = #{record.operateUid,jdbcType=BIGINT},
      operate_user = #{record.operateUser,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=TINYINT},
      info = #{record.info,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=TINYINT},
      pay_id = #{record.payId,jdbcType=VARCHAR},
      pay_type = #{record.payType,jdbcType=TINYINT},
      deposit_operate_type = #{record.depositOperateType,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lb.member.model.MemberDeposit">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    update member_deposit
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="rechargeAmount != null">
        recharge_amount = #{rechargeAmount,jdbcType=REAL},
      </if>
      <if test="applyTime != null">
        apply_time = #{applyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=REAL},
      </if>
      <if test="coin != null">
        coin = #{coin,jdbcType=REAL},
      </if>
      <if test="fcoin != null">
        fcoin = #{fcoin,jdbcType=REAL},
      </if>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null">
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="operateIp != null">
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        operate_time = #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateUid != null">
        operate_uid = #{operateUid,jdbcType=BIGINT},
      </if>
      <if test="operateUser != null">
        operate_user = #{operateUser,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=TINYINT},
      </if>
      <if test="payId != null">
        pay_id = #{payId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="depositOperateType != null">
        deposit_operate_type = #{depositOperateType,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lb.member.model.MemberDeposit">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Oct 13 09:51:21 CST 2017.
    -->
    update member_deposit
    set order_id = #{orderId,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      recharge_amount = #{rechargeAmount,jdbcType=REAL},
      apply_time = #{applyTime,jdbcType=TIMESTAMP},
      amount = #{amount,jdbcType=REAL},
      coin = #{coin,jdbcType=REAL},
      fcoin = #{fcoin,jdbcType=REAL},
      account_id = #{accountId,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      operate_ip = #{operateIp,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      operate_uid = #{operateUid,jdbcType=BIGINT},
      operate_user = #{operateUser,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      info = #{info,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=TINYINT},
      pay_id = #{payId,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=TINYINT},
      deposit_operate_type = #{depositOperateType,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 查看会员充值记录 -->
  <select id="queryMemberDepositList" resultType="map" parameterType="map" >
  	 SELECT * FROM ( SELECT 
		m.id AS id,
		m.order_id AS orderId,
		m.uid AS uid,
		m.user_name AS userName,
		m.name,
		m.recharge_amount AS rechargeAmount,
		m.amount AS amount,
		m.coin AS coin,
		m.fcoin AS fcoin,
		m.account_Id AS accountId,
		right(m.account, 10) AS account,
		m.account_name AS accountName,
		m.state AS state,
		m.flag AS flag,
		m.apply_time AS applyTime,
		m.operate_uid AS operateUid,
		m.operate_ip AS operateIp,
		m.operate_user AS operateUser,
		m.operate_time AS operateTime,
		m.deposit_operate_type AS depositOperateType,
		m.pay_type AS payType,
		m.info AS info,
		getItemName("DState",state) AS stateName,
		getItemName("PayType",pay_type) AS payName,
		getItemName("DOType",deposit_operate_type) AS depositOperateName
		FROM ls.member_deposit m
	<if test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
		UNION ALL 
		SELECT 
		his.id AS id,
		his.order_id AS orderId,
		his.uid AS uid,
		his.user_name AS userName,
		his.name,
		his.recharge_amount AS rechargeAmount,
		his.amount AS amount,
		his.coin AS coin,
		his.fcoin AS fcoin,
		his.account_Id AS accountId,
		right(his.account, 10) AS account,
		his.account_name AS accountName,
		his.state AS state,
		his.flag AS flag,
		his.apply_time AS applyTime,
		his.operate_uid AS operateUid,
		his.operate_ip AS operateIp,
		his.operate_user AS operateUser,
		his.operate_time AS operateTime,
		his.deposit_operate_type AS depositOperateType,
		his.pay_type AS payType,
		his.info AS info,
		getItemName("DState",state) AS stateName,
		getItemName("PayType",pay_type) AS payName,
		getItemName("DOType",deposit_operate_type) AS depositOperateName
		FROM 
		lshistory.`member_deposit_his` his
	</if>
	
	) m
	     LEFT JOIN user_info AS u ON m.uid = u.UID
	     where 1=1
	  <if test="VIP_ID != null and VIP_ID != ''">
        AND u.VIP_ID = #{VIP_ID}
      </if>
	  <if test="operate_user != null and operate_user != ''">
        AND m.operateUser LIKE CONCAT(CONCAT('%',#{operate_user}),'%')
      </if>
	  <if test="min_coin != null and min_coin != ''">
        AND m.min_coin &gt;= #{coin}
      </if>
	  <if test="max_coin != null and max_coin != ''">
        AND m.max_coin &lt;= #{coin}
      </if>
      
	  <if test="orderId != null and orderId != ''">
        and m.orderId LIKE CONCAT(CONCAT('%',#{orderId}),'%')
      </if>
      <if test="agentCount != null and agentCount !=''">
        and u.AGENT_COUNT LIKE CONCAT(CONCAT('%',#{agentCount}),'%')
      </if>
      <if test="userName != null and userName != ''">
        and m.userName like CONCAT(CONCAT('%',#{userName,jdbcType=VARCHAR}),'%')
      </if>
      <if test="name != null and name != ''">
        and m.name like CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
      </if>
      <if test="state != null and state != ''">
        and m.state = #{state,jdbcType=TINYINT}
      </if>
      <if test="startTime != null and startTime != ''">
		and m.applyTime <![CDATA[>=]]> #{startTime}
	  </if>
      <if test="endTime != null and endTime != ''">
	    and m.applyTime <![CDATA[<=]]> #{endTime}
      </if>
      <if test="operateTime != null and operateTime != ''">
        and m.operateTime = #{operateTime,jdbcType=TIMESTAMP}
      </if>
      <if test="depositOperateType != null and depositOperateType != ''">
        and m.depositOperateType = #{depositOperateType,jdbcType=TINYINT}
      </if>
      <if test="payType != null and payType != ''">
        and m.payType = #{payType,jdbcType=TINYINT}
      </if>
       <if test="orderState != null and orderState != '' and orderState == 1">
        and m.state in(1,2)
      </if>
	ORDER BY m.applyTime DESC
  
  </select>
<!--   按条件导出 -->
  <select id="exportDepositRecord" resultType="com.lb.download.model.DepositRecord" parameterType="map" >
  	 select 
		m.order_id AS orderId,
		m.user_name AS userName,
		m.amount AS amount,
		m.account_Id AS accountId,
		m.account AS account,
		m.account_name AS accountName,
		m.apply_time AS applyTime,
		m.operate_user AS operateUser,
		m.operate_time AS operateTime,
		m.info AS info,
		getItemName("DState",state) AS stateName,
		getItemName("PayType",pay_type) AS payName,
		getItemName("DOType",deposit_operate_type) AS depositOperateName
     from 
    <choose>
		<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
			lshistory.`member_deposit_his` m
		</when>
		<otherwise>
			ls.`member_deposit` m
		</otherwise>
	</choose>
     LEFT JOIN user_info AS u ON m.uid = u.UID
     where 1=1
	  <if test="orderId != null and orderId != ''">
        and m.order_id LIKE CONCAT(CONCAT('%',#{orderId}),'%')
      </if>
      <if test="agentCount != null and agentCount !=''">
        and u.AGENT_COUNT LIKE CONCAT(CONCAT('%',#{agentCount}),'%')
      </if>
      <if test="userName != null and userName != ''">
        and m.user_name like CONCAT(CONCAT('%',#{userName,jdbcType=VARCHAR}),'%')
      </if>
      <if test="name != null and name != ''">
        and m.name like CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
      </if>
      <if test="state != null and state != ''">
        and m.state = #{state,jdbcType=TINYINT}
      </if>
      <if test="startTime != null and startTime != ''">
		and m.apply_time <![CDATA[>=]]> #{startTime}
	  </if>
      <if test="endTime != null and endTime != ''">
	    and m.apply_time <![CDATA[<=]]> #{endTime}
      </if>
      <if test="operateTime != null and operateTime != ''">
        and m.operate_time = #{operateTime,jdbcType=TIMESTAMP}
      </if>
      <if test="depositOperateType != null and depositOperateType != ''">
        and m.deposit_operate_type = #{depositOperateType,jdbcType=TINYINT}
      </if>
      <if test="payType != null and payType != ''">
        and m.pay_type = #{payType,jdbcType=TINYINT}
      </if>
	ORDER BY m.state, m.apply_time DESC, m.operate_time DESC
  </select>
  
  
  <select id="depositQuery" resultType="map" parameterType="map" >
  	SELECT
			u.UID,
			u.`USER_NAME` AS userName,
			u.name AS fullName,
			u.COIN as coin,
			u.AGENT_COUNT AS proxyName,
			<!-- p.proxy_name AS proxyName, -->
			u.VIP_ID AS vipId,
			u.REG_TIME AS regTime,
			u.remark as info,
			v.vipName,
			u.status,
			u.PHONE_NUMBER as phoneNumber,
			u.qq,
			u.weixin,
			u.email,
			u.BANK_ACCOUNT AS bankAccount,
			u.BANK_NAME as bankName,
			u.BANK_ADDRESS as bankAddress,
			u.betsum,
			u.BANK_BLACKLIST_STATUS as bankBlacklistStatus,
			u.REG_IP as regIp,
			u.source,
			u.score,
			u.WITHDRAW_NEEDSUM  as betsumNeed,
			u.CHANNEL as channel,
			u.LAST_LOGIN_TIME as lastLoginTime,
			(SELECT user_info.user_name FROM user_info WHERE user_info.uid=u.parent_id) AS parentName
		FROM
			user_info AS u
			LEFT JOIN user_vip_info v ON u.`VIP_ID`=v.`vipId`
			<!-- LEFT JOIN proxy_info p ON p.id=u.`AGENT_ID` -->
		WHERE
			u.USER_NAME=#{userName}
  </select>
  <select id="depositUserInfo" resultType="map" parameterType="map" >
  	  SELECT
			u.UID,
			u.`USER_NAME` AS userName,
			u.USERTYPE AS userType,
			u.name AS fullName,
			u.COIN as coin,
			u.AGENT_COUNT AS proxyName,
			u.VIP_ID AS vipId,
			u.REG_TIME AS regTime,
			u.remark as info,
			v.vipName,
			u.status,
			u.PHONE_NUMBER as phoneNumber,
			u.qq,
			u.line,
			u.weixin,
			u.email,
			u.BANK_ACCOUNT AS bankAccount,
			u.BANK_NAME as bankName,
			u.BANK_ADDRESS as bankAddress,
			u.betsum,
			u.BANK_BLACKLIST_STATUS as bankBlacklistStatus,
			u.REG_IP as regIp,
			u.source,
			u.score,
			u.REG_SYSTEM as regSystem,
			u.WITHDRAW_NEEDSUM  as betsumNeed,
			u.CHANNEL as channel,
			u.LAST_LOGIN_TIME as lastLoginTime,
			(SELECT user_info.user_name FROM user_info WHERE user_info.uid=u.parent_id) AS parentName
		FROM
			user_info AS u
			LEFT JOIN user_vip_info v ON u.`VIP_ID`=v.`vipId`
		WHERE
			u.USER_NAME=#{userName}
  </select>
  
  <select id="queryMemberDepositDate" resultType="map" parameterType="map" >
  	 SELECT 
	  	 sum(case when t.state=3 then 1 else 0 end) as depositSum,
	  	 sum(case when t.deposit_operate_type=2 and t.state=3 then 1 else 0 end) as depositRGSum,
		 sum(case when t.state=3 then t.amount else 0 end) as depositAmountSum,
		 sum(case when t.deposit_operate_type=2 and t.state=3 then t.amount else 0 end) as depositAmountRGSum 
	 FROM member_deposit  t 
	 WHERE t.user_name=#{userName};
	  
  </select>
  <update id="updateDepositInfoState" parameterType="map">
 		UPDATE 
			<choose>
				<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
					lshistory.`member_deposit_his` mw
				</when>
				<otherwise>
					ls.`member_deposit` mw
				</otherwise>
			</choose> 
		SET 
			mw.`amount`=#{amount},
			mw.`state`=#{state},
			<if test="info != null and info != ''">
				mw.`info`=#{info},
			</if>
			<if test="depositGive != null and depositGive != ''">
				mw.`recharge_amount`=mw.amount+#{depositGive},
			</if>
			mw.`operate_time`=NOW()
		WHERE
			mw.`id`=#{id}
			AND mw.`state`=2
   </update>
   <!-- 更改会员或者代理金额 -->
	<update id="updateUserCoin" parameterType="map">
		UPDATE
			ls.`user_info` ui
		SET 
			<if test="VIP_ID !=null and VIP_ID !='' and VIP_ID != -1">
				VIP_ID = IF(#{VIP_ID}>VIP_ID,#{VIP_ID},VIP_ID),
			</if>
			ui.`COIN`=(ui.`COIN`+#{amount}+#{depositGive}),ui.WITHDRAW_NEEDSUM=ui.WITHDRAW_NEEDSUM+#{amount}*IFNULL((SELECT IFNULL(sys_config1,0.00) FROM sys_configure WHERE on_off = 1 AND configure = "drawRunTimes"),0.00)
		WHERE
			ui.`UID`=#{uid}
	</update>
	<!-- 增加资金明细记录 -->
	<insert id="addUserCoinLog" parameterType="map">
		INSERT INTO ls.`coin_log`(
			`user_type`,
			`uid`,
			`user_name`,
			`coin`,
			`userCoin`,
			`coin_before`,
			`fcoin`,
			`coin_operate_type`,
			inputTime
			<if test="orderId != null">
				,`order_id`
			</if>
			<if test="operateIp != null">
				,`operate_ip`
			</if>
			<if test="userId != null">
				,`operate_uid`
			</if>
			<if test="sysUserName != null">
				,`operate_user`
			</if>
			<if test="info != null">
				,`info`
			</if>
			)
			VALUES (
				2,
				#{uid},
				#{userName},
				#{coin},
				#{userCoin},
				#{coinBefore},
				#{fcoin},
				#{coinOperateType},
				now()
				<if test="orderId != null">
					,#{orderId}
				</if>
				<if test="operateIp != null">
					,#{operateIp}
				</if>
				<if test="userId != null">
					,#{userId}
				</if>
				<if test="sysUserName != null">
					,#{sysUserName}
				</if>
				<if test="info != null">
					,#{info}
				</if>
			)
	</insert>
	<!-- 增加资金明细记录 -->
	<insert id="addGiveCoinLog" parameterType="map">
		INSERT INTO ls.`coin_log`(
			`user_type`,
			`uid`,
			`user_name`,
			`coin`,
			`userCoin`,
			`coin_before`,
			`fcoin`,
			`coin_operate_type`,
			inputTime
			<if test="operateIp != null">
				,`operate_ip`
			</if>
			<if test="userId != null">
				,`operate_uid`
			</if>
			<if test="sysUserName != null">
				,`operate_user`
			</if>
			<if test="info != null">
				,`info`
			</if>
			)
			VALUES (
				2,
				#{uid},
				#{userName},
				#{depositGive},
				#{COIN}+#{depositGive}+#{amount},
				#{COIN}+#{amount},
				#{fcoin},
				10,
				now()
				<if test="operateIp != null">
					,#{operateIp}
				</if>
				<if test="userId != null">
					,#{userId}
				</if>
				<if test="sysUserName != null">
					,#{sysUserName}
				</if>
				<if test="info != null">
					,#{info}
				</if>
			)
	</insert>
	<select id="queryById" resultType="map" parameterType="map" >
  	 select
  	 	u.WITHDRAW_NEEDSUM,
  	 	u.COIN,
  	 	u.RECHARGE_TIMES,
    	m.id AS id,
		m.order_id AS orderId,
		m.uid AS uid,
		m.user_name AS userName,
		m.name,
		m.recharge_amount AS rechargeAmount,
		m.amount AS amount,
		m.coin AS coin,
		m.fcoin AS fcoin,
		m.account_Id AS accountId,
		m.account AS account,
		m.account_name AS accountName,
		m.state AS state,
		m.flag AS flag,
		m.apply_time AS applyTime,
		m.operate_uid AS operateUid,
		m.operate_ip AS operateIp,
		m.operate_user AS operateUser,
		m.operate_time AS operateTime,
		m.deposit_operate_type AS depositOperateType,
		m.pay_type AS payType,
		m.info AS info,
		getItemName("DState",state) AS stateName,
		getItemName("PayType",pay_type) AS payName,
		getItemName("DOType",deposit_operate_type) AS depositOperateName
    from 
    <choose>
		<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
			lshistory.`member_deposit_his` m
		</when>
		<otherwise>
			ls.`member_deposit` m
		</otherwise>
	</choose>
	LEFT JOIN user_info u ON u.UID=m.uid
 	where m.id=#{id}
	  
  </select>
   <insert id="manualDeposit" parameterType="map">
		INSERT INTO member_deposit
			(
				account_id,account,account_name,order_id,uid,user_name,name,recharge_amount,apply_time,amount,coin,fcoin,operate_ip,operate_user,state,deposit_operate_type,info,operate_time
			)
		VALUES
			(
				#{bankName},#{bankAccount},#{bankAddress},#{order_id},#{uid},#{user_name},#{name},#{recharge_amount},#{apply_time},#{amount},#{coin},#{fcoin},#{operate_ip},#{operate_user},#{state},
				#{deposit_operate_type},#{info},now()
			)
  </insert>
</mapper>