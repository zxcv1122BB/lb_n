<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.sys.dao.BettingOrderInfoMapper">
  <resultMap id="BaseResultMap" type="com.lb.betting.model.BettingOrderInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 18 10:42:05 CST 2017.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <!-- <result column="user_name" jdbcType="VARCHAR" property="userName" /> -->
    <result column="user_type" jdbcType="VARCHAR" property="userType" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="TINYINT" property="type" />
   <!--  <result column="type_name" jdbcType="VARCHAR" property="typeName" /> -->
    <result column="played_group_id" jdbcType="SMALLINT" property="playedGroupId" />
    <result column="playedid" jdbcType="INTEGER" property="playedId" />
    <result column="bet_type" jdbcType="VARCHAR" property="betType" />
    <result column="action_issue" jdbcType="VARCHAR" property="actionNo" />
    <result column="action_ip" jdbcType="VARCHAR" property="actionIp" />
    <result column="action_num" jdbcType="INTEGER" property="actionNum" />
    <result column="action_time" jdbcType="TIMESTAMP" property="actionTime" />
    <result column="times" jdbcType="INTEGER" property="times" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="get_count" jdbcType="SMALLINT" property="getCount" />
    <result column="bonus" jdbcType="DECIMAL" property="bonus" />
    <result column="is_cal" jdbcType="TINYINT" property="isCal" />
    <result column="errormgs" jdbcType="VARCHAR" property="errormgs" />
    <result column="inputtime" jdbcType="TIMESTAMP" property="inputtime" />
    <result column="id3" jdbcType="INTEGER" property="id3" />
    <result column="name3" jdbcType="VARCHAR" property="name3" />
    <result column="openIssue" jdbcType="VARCHAR" property="openIssue"/>
  </resultMap>

  <sql id="Base_Column_List">
    
   id, orderId, uid, user_type, name, type, type_name, played_group_id, playedid, 
    bet_type, action_no, action_ip, action_num, action_time, times, amount, 
    get_count, bonus, is_cal
  </sql>
  <select id="queryBettingOrderInfoByCal_no"  resultMap="BaseResultMap">
    SELECT 
	  	game_bets.id,orderId,user_info.uid, 
	  	user_info.user_name AS userName,
	  	game_type.show_name AS typeName,
	  	groupName AS playedGroupName,
	  	user_type,user_info.name,game_play_group.type,
	  	type_name,played_group_id,
	    bet_type,action_issue,action_ip,action_num,
	    action_time,times,amount, 
	    get_count,bonus,is_cal,game_bets.status,
		game_played.`name` AS 'name3',game_played.id AS 'id3'
    FROM 
	    ls.`game_bets` game_bets,
		ls.user_info user_info,
		ls.game_play_group game_play_group,
		ls.game_type game_type,
		ls.game_played game_played
    WHERE game_bets.uid=user_info.uid AND game_play_group.type=game_type.gameId
    AND game_bets.played_group_id=game_play_group.id
		AND game_bets.playedid = game_played.id
		<if test="cal_no !=null and cal_no !='' ">
	    and cal_no=#{cal_no}
		</if>
    order by game_bets.action_time desc
  </select>
  
  
  <select id="queryBettingOrderInfo" resultMap="BaseResultMap">
  	select 
		bets.*, 
		game_type.show_name AS typeName,
		game_play_group.groupName AS playedGroupName,
		us.USERTYPE as user_type,
		us.AGENT_COUNT AS agentName,
		game_played.`name` AS name3,
	    game_played.id AS id3
	from (
		SELECT 
			id,
			orderId,
			uid, 
			user_name AS userName,
			`type`, 
			action_date_result AS actionDataResult, 
			type_name,
			played_group_id,
			playedid,
			bet_type,
			action_no,
			action_ip,
			action_num, 
			cal_time AS calTime, 
			action_time,
			times,
			amount, 
			`open_no` AS openNo, 
			`action_issue` AS openIssue, 
			`action_data_str` AS actionData, 
			`bet_odds` AS betOdds, 
			get_count,
			bonus,
			is_cal,
			`status`
		FROM `game_bets` gb
		where gb.game_type=1
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]> #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
		    and gb.action_time <![CDATA[<=]]> #{endTime}
		</if>
		<if test="orderId != null and orderId != ''">
	      	and gb.orderId like CONCAT(CONCAT('%',#{orderId,jdbcType=VARCHAR}),'%')
		</if>
		<if test="username != null and username != ''">
	      	and gb.user_name like CONCAT(CONCAT('%',#{username,jdbcType=VARCHAR}),'%')
		</if>
		<if test="lowerAmount != null and lowerAmount != ''">
			and gb.amount <![CDATA[>=]]> #{lowerAmount}
		</if>
		<if test="higherAmount != null and higherAmount != ''">
		    and gb.amount <![CDATA[<=]]> #{higherAmount}
		</if>
		<if test="lowerBonus != null and lowerBonus != ''">
			and gb.bonus <![CDATA[>=]]> #{lowerBonus}
			and gb.status=1
			and gb.is_cal=1
		</if>
		<if test="higherBonus != null and higherBonus != ''">
		    and gb.bonus <![CDATA[<=]]> #{higherBonus}
			and gb.status=1
			and gb.is_cal=1
		</if>
		<if test="status != null and status != ''">
		    and gb.status = #{status}
		</if>
		<if test="matchId != null and matchId != ''">
			AND FIND_IN_SET(#{matchId},gb.action_no)
		</if>
		<if test="actionIssue != null and actionIssue != ''">
			AND gb.action_issue = #{actionIssue}
		</if>
		<if test="userType != null and userType !='' and userType==1">
			and gb.user_type in (1,2)
		</if>
		<if test="userType != null and userType !='' and userType==2">
			and gb.user_type = 6
		</if>
		<if test="gameType != null and gameType != ''">
	      	and gb.type=#{gameType}
		</if>
		union all
		SELECT 
			id,
			orderId,
			uid, 
			user_name AS userName,
			`type`, 
			action_date_result AS actionDataResult, 
			type_name,
			played_group_id,
			playedid,
			bet_type,
			action_no,
			action_ip,
			action_num, 
			cal_time AS calTime, 
			action_time,
			times,
			amount, 
			`open_no` AS openNo, 
			`action_issue` AS openIssue, 
			`action_data_str` AS actionData, 
			`bet_odds` AS betOdds, 
			get_count,
			bonus,
			is_cal,
			`status`
		FROM lshistory.game_bets_his gb
		where gb.game_type=1 
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]> #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
		    and gb.action_time <![CDATA[<=]]> #{endTime}
		</if>
		<if test="orderId != null and orderId != ''">
	      	and gb.orderId like CONCAT(CONCAT('%',#{orderId,jdbcType=VARCHAR}),'%')
		</if>
		<if test="username != null and username != ''">
	      	and gb.user_name like CONCAT(CONCAT('%',#{username,jdbcType=VARCHAR}),'%')
		</if>
		<if test="lowerAmount != null and lowerAmount != ''">
			and gb.amount <![CDATA[>=]]> #{lowerAmount}
		</if>
		<if test="higherAmount != null and higherAmount != ''">
		    and gb.amount <![CDATA[<=]]> #{higherAmount}
		</if>
		<if test="lowerBonus != null and lowerBonus != ''">
			and gb.bonus <![CDATA[>=]]> #{lowerBonus}
			and gb.status=1
			and gb.is_cal=1
		</if>
		<if test="higherBonus != null and higherBonus != ''">
		    and gb.bonus <![CDATA[<=]]> #{higherBonus}
			and gb.status=1
			and gb.is_cal=1
		</if>
		<if test="status != null and status != ''">
		    and gb.status = #{status}
		</if>
		<if test="matchId != null and matchId != ''">
			AND FIND_IN_SET(#{matchId},gb.action_no)
		</if>
		<if test="actionIssue != null and actionIssue != ''">
			AND gb.action_issue = #{actionIssue}
		</if>
		<if test="userType != null and userType !='' and userType==1">
			and gb.user_type in (1,2)
		</if>
		<if test="userType != null and userType !='' and userType==2">
			and gb.user_type = 6
		</if>
		<if test="gameType != null and gameType != ''">
	      	and gb.type=#{gameType}
		</if>
	) as bets
	LEFT JOIN game_play_group game_play_group ON bets.played_group_id=game_play_group.id AND game_play_group.`status`=1
	LEFT JOIN game_type game_type ON bets.type=game_type.gameId AND game_type.`status`=1
	LEFT JOIN game_played game_played ON bets.playedid = game_played.id
	left join user_info us on us.UID = bets.uid
	order by bets.action_time desc
    <!-- select * from (
  	SELECT 
	  	game_bets.id,orderId,game_bets.uid, 
	  	game_bets.user_name AS userName,
	  	game_type.show_name AS typeName,
	  	groupName AS playedGroupName,
	  	user_type,
	  	us.AGENT_COUNT as agentName,
	  	game_bets.type,
		action_date_result AS actionDataResult,
	  	type_name,played_group_id,
	    bet_type,action_no,action_ip,action_num,
	    cal_time AS calTime,
	    action_time,times,amount,
	    game_bets.`open_no` AS openNo,#开奖号码
	    game_bets.`action_issue` AS openIssue,#开奖期号
		game_bets.`action_data_str` AS actionData,#投注号码
		game_bets.`bet_odds` AS betOdds,#投注赔率
	    get_count,bonus,is_cal,game_bets.status,
	    game_played.`name` AS 'name3',game_played.id AS 'id3'
    FROM `game_bets` game_bets
	LEFT JOIN ls.game_play_group game_play_group ON game_bets.played_group_id=game_play_group.id 
		AND game_play_group.`status`=1
	LEFT JOIN ls.game_type game_type ON game_bets.type=game_type.gameId AND game_type.`status`=1
	LEFT JOIN ls.game_played game_played ON game_bets.playedid = game_played.id 
	left join ls.user_info us on us.UID = game_bets.uid
    WHERE game_bets.game_type=1
	<if test="startTime != null and startTime != ''">
		and game_bets.action_time <![CDATA[>=]]> #{startTime}
	</if>
	<if test="endTime != null and endTime != ''">
	    and game_bets.action_time <![CDATA[<=]]> #{endTime}
	</if>
	<if test="orderId != null and orderId != ''">
      	and game_bets.orderId like CONCAT(CONCAT('%',#{orderId,jdbcType=VARCHAR}),'%')
	</if>
	<if test="username != null and username != ''">
      	and us.user_name like CONCAT(CONCAT('%',#{username,jdbcType=VARCHAR}),'%')
	</if>
	<if test="gameType != null and gameType != ''">
      	and game_type.gameId=#{gameType}
	</if>
	<if test="lowerAmount != null and lowerAmount != ''">
		and game_bets.amount <![CDATA[>=]]> #{lowerAmount}
	</if>
	<if test="higherAmount != null and higherAmount != ''">
	    and game_bets.amount <![CDATA[<=]]> #{higherAmount}
	</if>
	<if test="lowerBonus != null and lowerBonus != ''">
		and game_bets.bonus <![CDATA[>=]]> #{lowerBonus}
		and game_bets.status=1
		and game_bets.is_cal=1
	</if>
	<if test="higherBonus != null and higherBonus != ''">
	    and game_bets.bonus <![CDATA[<=]]> #{higherBonus}
		and game_bets.status=1
		and game_bets.is_cal=1
	</if>
	<if test="status != null and status != ''">
	    and game_bets.status = #{status}
	</if>
	<if test="matchId != null and matchId != ''">
	    AND game_bets.`type`= #{type}
		AND FIND_IN_SET(#{matchId},game_bets.action_no)
	</if>
	<if test="actionIssue != null and actionIssue != ''">
		AND game_bets.action_issue = #{actionIssue}
	</if>
	<if test="userType != null and userType !='' and userType==1">
		代理与会员同属会员
		and us.USERTYPE in (1,2)
	</if>
	<if test="userType != null and userType !='' and userType==2">
		测试
		and us.USERTYPE = 6
	</if>
	union all
	SELECT 
	  	hgame_bets.id,orderId,hgame_bets.uid, 
	  	hgame_bets.user_name AS userName,
	  	game_type.show_name AS typeName,
	  	groupName AS playedGroupName,
	  	user_type,
	  	us.AGENT_COUNT as agentName,
	  	hgame_bets.type,
		action_date_result AS actionDataResult,
	  	type_name,played_group_id,
	    bet_type,action_no,action_ip,action_num,
	    cal_time AS calTime,
	    action_time,times,amount,
	    hgame_bets.`open_no` AS openNo,#开奖号码
	    hgame_bets.`action_issue` AS openIssue,#开奖期号
		hgame_bets.`action_data_str` AS actionData,#投注号码
		hgame_bets.`bet_odds` AS betOdds,#投注赔率
	    get_count,bonus,is_cal,hgame_bets.status,
	    game_played.`name` AS 'name3',game_played.id AS 'id3'
    FROM lshistory.`game_bets_his` hgame_bets
	LEFT JOIN ls.game_play_group game_play_group ON hgame_bets.played_group_id=game_play_group.id 
		AND game_play_group.`status`=1
	LEFT JOIN ls.game_type game_type ON hgame_bets.type=game_type.gameId AND game_type.`status`=1
	LEFT JOIN ls.game_played game_played ON hgame_bets.playedid = game_played.id 
	left join ls.user_info us on us.UID = hgame_bets.uid
    WHERE hgame_bets.game_type=1
    <if test="startTime != null and startTime != ''">
		and hgame_bets.action_time <![CDATA[>=]]> #{startTime}
	</if>
	<if test="endTime != null and endTime != ''">
	    and hgame_bets.action_time <![CDATA[<=]]> #{endTime}
	</if>
	<if test="orderId != null and orderId != ''">
      	and hgame_bets.orderId like CONCAT(CONCAT('%',#{orderId,jdbcType=VARCHAR}),'%')
	</if>
	<if test="username != null and username != ''">
      	and us.user_name like CONCAT(CONCAT('%',#{username,jdbcType=VARCHAR}),'%')
	</if>
	<if test="gameType != null and gameType != ''">
      	and hgame_bets.gameId=#{gameType}
	</if>
	<if test="lowerAmount != null and lowerAmount != ''">
		and hgame_bets.amount <![CDATA[>=]]> #{lowerAmount}
	</if>
	<if test="higherAmount != null and higherAmount != ''">
	    and hgame_bets.amount <![CDATA[<=]]> #{higherAmount}
	</if>
	<if test="lowerBonus != null and lowerBonus != ''">
		and hgame_bets.bonus <![CDATA[>=]]> #{lowerBonus}
		and hgame_bets.status=1
		and hgame_bets.is_cal=1
	</if>
	<if test="higherBonus != null and higherBonus != ''">
	    and hgame_bets.bonus <![CDATA[<=]]> #{higherBonus}
		and hgame_bets.status=1
		and hgame_bets.is_cal=1
	</if>
	<if test="status != null and status != ''">
	    and hgame_bets.status = #{status}
	</if>
	<if test="matchId != null and matchId != ''">
	    AND game_bets.`type`= #{type}
		AND FIND_IN_SET(#{matchId},hgame_bets.action_no)
	</if>
	<if test="actionIssue != null and actionIssue != ''">
		AND hgame_bets.action_issue = #{actionIssue}
	</if>
	<if test="userType != null and userType !='' and userType==1">
		代理与会员同属会员
		and us.USERTYPE in (1,2)
	</if>
	<if test="userType != null and userType !='' and userType==2">
		测试
		and us.USERTYPE = 6
	</if>
	) as bets order by bets.action_time DESC -->
  </select>
  
  <select id="queryGameType" resultType="com.lb.betting.model.GameType">
  		select gameId,gameName,status,game_type from game_type
  </select>
  
   <select id="queryFailOrderInfo" resultMap="BaseResultMap">
  	SELECT 
	  	game_bets.id,orderId,user_info.uid, 
	  	game_bets_open_error.inputtime,
	  	game_bets_open_error.errormgs,
	  	user_info.user_name AS userName,
	  	game_type.show_name AS typeName,
	  	groupName AS playedGroupName,
	  	user_type,user_info.name,game_play_group.type,
	  	type_name,played_group_id,
	    bet_type,action_issue,action_ip,action_num,times,amount, 
	    get_count,bonus,is_cal,game_bets.status
    FROM 
    	
		ls.`game_bets` game_bets,
		ls.user_info user_info,
		ls.game_play_group game_play_group,
		ls.game_type game_type,
		ls.game_bets_open_error game_bets_open_error
    WHERE game_bets.uid=user_info.uid AND game_play_group.type=game_type.gameId
    AND game_bets.played_group_id=game_play_group.id
    AND game_bets.id=game_bets_open_error.betid and game_bets.game_type=1
	<if test="startTime != null and startTime != ''">
		and game_bets.action_time <![CDATA[>=]]> #{startTime}
	</if>
	<if test="endTime != null and endTime != ''">
	    and game_bets.action_time <![CDATA[<=]]> #{endTime}
	</if>
	<if test="username != null and username != ''">
      	and user_info.USER_NAME like CONCAT(CONCAT('%',#{username,jdbcType=VARCHAR}),'%')
	</if>
      order by game_bets.action_time desc
  </select>
 
  <resultMap type="com.lb.betting.model.UserDetail" id="queryUserInfoMap">
  	<id column="uid" property="uid"/>
  	<result column="userName" jdbcType="VARCHAR" property="userName"/>
  	<result column="registerTime" property="registerTime"/>
  	<result column="registerIp" property="registerIp"/>
  	<result column="grade" property="grade"/>
  	<result column="score" property="score"/>
  	<result column="scoreTotal" property="scoreTotal"/>
  	<result column="coin" property="coin"/>
  	<result column="fcion" property="fcion"/>
  	<result column="vipGrade" property="vipGrade"/>
  	<result column="QQ" property="QQ"/>
  	<result column="weChat" property="weChat"/>
  	<result column="status" property="status"/>
  	<result column="canGetCoin" property="canGetCoin"/>
  	<result column="notGetCoin" property="notGetCoin"/>
  	<result column="phoneNumber" property="phoneNumber"/>
  	
  	<collection property="loginLog" column="userName" ofType="com.lb.betting.model.LoginLog">  
       <result column="loginTime" property="loginTime"/>
  		<result column="loginIp" property="loginIp"/>
    </collection> 
  </resultMap>
  <select id="queryUserInfo" resultMap="queryUserInfoMap">
  		SELECT 
			uid,
			USER_NAME AS userName,
			LAST_LOGIN_TIME AS loginTime,
			user_info.`LAST_LOGIN_IP` AS loginIp,
			REG_TIME AS registerTime,
			REG_IP AS registerIp,
			grade,
			score,
			score_total AS scoreTotal,
			coin,
			fcion,
			coin-fcion AS canGetCoin,
			fcion AS notGetCoin,
			IF(user_info.`VIP_ID`=0,NULL,vipName) AS vipGrade,
			phone_number AS phoneNumber,
			QQ,
			WEIXIN AS weChat,
			user_info.`status`
		FROM user_info
		LEFT JOIN user_vip_info ON
		user_vip_info.`vipId`=user_info.`VIP_ID`
		WHERE  user_info.USER_NAME=#{userName}
		<!-- GROUP BY user_info.LAST_LOGIN_TIME DESC -->
  </select>
  
  <select id="queryBettingOrder" resultType="com.lb.betting.model.BettingOrderDetail">
	  	SELECT 
			orderId,
			game_bets.uid, 
			game_bets.user_name AS userName,
			game_type.show_name AS typeName,
			game_bets.type,
			action_no AS matchIds,
			is_cal AS isCal,
			(SELECT game_played.name FROM game_played WHERE game_played.id=game_bets.`playedid`) AS playedName,
		    <!-- CONCAT('类型:',game_played.name,' 注数:',game_bets.action_num,' ') AS actionData, -->
		    game_play_group.`groupName` AS groupName,
		    action_data_str AS actionData,
			action_date_result AS actionDataResult,
			return_award_rate AS returnAwardRate,
		    action_issue AS actionNo,
		    action_ip AS actionIp,
		    action_time AS actionTime,
		    amount,
		    bonus,
		    game_bets.status
	     FROM 
		    <choose>
				<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
					lshistory.`game_bets_his` game_bets
				</when>
				<otherwise>
					ls.`game_bets` game_bets
				</otherwise>
			</choose>
		LEFT JOIN ls.game_play_group game_play_group ON game_bets.`played_group_id`=game_play_group.id 
			AND game_play_group.`status`=1
		LEFT JOIN ls.game_type game_type ON game_bets.type=game_type.gameId 
			AND game_type.`status`=1 
	    WHERE game_bets.id=#{betId} and game_bets.game_type=1 LIMIT 1
  </select>
  <update id="cancelTheOrder">
  	update game_bets set status=2,update_time=NOW(),update_by=#{uid} where id=#{betId} AND game_bets.is_cal=0 AND game_bets.status=3
  </update>
  <update id="userAccountChange">
  	UPDATE 
  		user_info u 
  	SET 
  		u.`BETSUM` = IF(u.`BETSUM`-#{coin}&lt;0,0,u.`BETSUM`-#{coin}),
  		<!-- 将投注金额增加回来 -->
  		u.`COIN` = #{coin}+u.`COIN`
  	WHERE u.`UID`=#{uid}
  		<!-- u.`COIN` = u.`COIN`+
  		(SELECT coin
	  		FROM coin_log 
	  		WHERE order_id=(
	  			SELECT 
	  				orderId 
	  			FROM 
	  				game_bets 
	  			WHERE id=#{betId} AND game_bets.status=2 AND u.`UID`=game_bets.`uid` LIMIT 1) AND u.`UID`=coin_log.`uid` AND coin_log.`coin_operate_type`=3 AND coin_log.`user_type`=2) 
	WHERE u.`UID`=(SELECT gb.`uid` FROM game_bets gb WHERE gb.id=#{betId} AND gb.status=2)-->
  </update>
  <!-- 获取用户的投注量信息及变动的打码量 -->
  <select id="getUserBetsumInfo" resultType="map" parameterType="map">
  	SELECT 
		coin_log.order_id AS orderId,
		coin_log.user_type AS userType,
		coin_log.trial_sign AS trialSign,
		coin_log.uid,
		coin_log.user_name AS userName,
		coin_log.`type`,
		coin_log.betid AS betId,
		coin_log.playedGroupId,
		coin_log.coin,
		u.`COIN` AS coinBefore,
		u.`COIN`+coin_log.coin AS coinAfter,
		coin_log.fcoin
	FROM coin_log
	LEFT JOIN game_bets gb ON gb.orderId=coin_log.`order_id` AND gb.status=2
	LEFT JOIN user_info u ON u.`UID`=gb.`uid`
	WHERE gb.id=#{betId} AND coin_operate_type=3 LIMIT 1
  </select>
  <insert id="insertCancelCoinLog">
		INSERT INTO coin_log(
			order_id,
			user_type,
			trial_sign,
			uid,
			user_name,`type`,
			betid,
			playedGroupId,
			coin,
			userCoin,
			coin_before,
			fcoin,
			coin_operate_type,
			operate_time,
			info,
			operate_uid,
			operate_user)
		VALUES(
			#{orderId},
			#{userType},
			#{trialSign},
			#{uid},
			#{userName},
			#{type},
			#{betId},
			#{playedGroupId},
			#{coin},
			(select coin from user_info where uid = #{uid}),
			(select coin from user_info where uid = #{uid}) + #{coin},
			(select fcion from user_info where uid = #{uid}),
			#{coinOperateType},
			NOW(),
			#{info},
			#{sysId},
			#{sysName})
  </insert>
  <!-- 足球比赛信息 -->
  <select id="queryBettingDetailList" parameterType="map" resultType="com.lb.betting.model.BettingInfoDetail">
		SELECT
			match_id AS matchId,
			home_team_name AS homeTeamName,
			away_team_name awayTeamName,
			sessions AS matchSessions,
			match_result AS matchResult,
			deadline_bet AS matchDate,
			match_status AS matchStatus,
			court_score AS courtScore,
			one_type_id AS `type`,
			not_letball_result AS notLetball,
			letball_result AS letball,
			half_court_result AS halfCourt,
			court_score_result AS scoreResult,
			court_score_result_bj AS scoreResultBj,
			total_goal_result AS totalGoal,
			up_down_result AS upDown,
			home_score_tradition AS homeScoreTradition,<!-- 主队总进球——传统,，e.g:0123 -->
			away_score_tradition AS awayScoreTradition,<!-- 客队总进球——传统，e.g:0123 -->
			half_result_tratidion AS halfResultTratidion,<!-- 半场结果（胜平负，e.g:310） -->
			full_result_tradition AS fullResultTradition<!-- 全场结果（胜平负，e.g:310） -->
		FROM 
		<choose>
			<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
				lshistory.`football_match_info_his` football_match_info
			</when>
			<otherwise>
				ls.`football_match_info` football_match_info
			</otherwise>
		</choose>
		WHERE 
			football_match_info.`match_id` IN
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<foreach collection="matchIds" item="matchId" separator=",">
				#{matchId}
			</foreach>
		</trim>
	</select>
	<!-- 篮球比赛信息 -->
	<select id="queryBasketballDetailList" parameterType="map" resultType="com.lb.betting.model.BettingInfoDetail">
		SELECT
			match_id AS matchId,
			home_team_name AS homeTeamName,
			away_team_name awayTeamName,
			sessions AS matchSessions,
			match_result AS matchResult,
			match_date AS matchDate,
			one_type_id AS `type`,
			match_status AS matchStatus,
			court_score AS courtScore,
			court_score_result AS scoreResult,<!-- D G(全场比分结果) -->
			CONCAT(let_score_result,'#',let_score) AS letScore,<!-- //H(让分胜负) -->
			CONCAT(big_small_score_result,'#',expect_total_score) AS sizeScore,<!-- #;//I(大小分) -->
			win_score_result AS winScore<!-- #;//J(胜分差) -->
		FROM 
		<choose>
			<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
				lshistory.`basketball_match_info_his` basketball_match_info
			</when>
			<otherwise>
				ls.`basketball_match_info` basketball_match_info
			</otherwise>
		</choose>
		WHERE
			basketball_match_info.`match_id` IN
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<foreach collection="matchIds" item="matchId" separator=",">
				#{matchId}
			</foreach>
		</trim>
	</select>
	<select id="getActionDataResult" resultType="map" parameterType="map">
		SELECT 
			action_date_result AS actionDataResult,
			gb.`type`,
			gb.`times`,
			action_no as matchIds,
			GROUP_CONCAT(bet_series.series_name)  AS seriesName,
			GROUP_CONCAT(DISTINCT bet_series.series_list) AS seriesList
		FROM 
			game_bets gb
		LEFT JOIN 
			bet_series ON FIND_IN_SET(series_id,gb.`bet_type`)
		WHERE gb.`id`=#{betId} and gb.`status`=1
	</select>
	<!-- 获取对应类型的字典数据 -->
	<select id="getCodeLibrary" resultType="com.lb.betting.model.ItemModel">
		SELECT 
			itemID,
			itemName,
			rxp1 
		FROM 
			code_library 
		WHERE
		<if test="quizType != null and quizType != ''">
			codeID=#{quizType} AND
		</if>
		`status`=1
	</select>
	<!-- 获取投注及用户的金额信息 -->
	<select id="getCorrespondingGameBets" resultType="map" parameterType="map">
		SELECT 
			game_bets.id AS betId,
			orderId,
			game_bets.user_type AS userType,
			game_bets.user_type AS trialSign,
			game_bets.`uid`,
			game_bets.user_name AS userName,
			`type`,
			game_bets.`status`,
			game_bets.amount,
			`played_group_id` AS playedGroupId,
			bonus AS coin,
			bet_rebate AS betRebate,
			<!-- user_info.`COIN`-bet_rebate AS rebateAfter,
			user_info.`COIN` AS coinBefore,
			user_info.`COIN`-bonus AS coinAfter,
			user_info.`FCION` AS fcoin, -->
			#{sysId} AS sysId,
			#{sysName} AS sysName,
			20 AS coinOperateType,
			'开奖回滚' AS info
		FROM
			game_bets
 		LEFT JOIN user_info ON game_bets.`uid`=user_info.`UID`
		WHERE
			game_bets.is_cal=1 and game_bets.game_type=1
			AND (game_bets.`status`=0 OR game_bets.`status`=1)
		<choose>
			<when test="matchId != null and matchId != ''">
				AND FIND_IN_SET(#{matchId},action_no)
			</when>
			<when test="actionIssue != null and actionIssue != ''">
				AND action_issue=#{actionIssue}
				<if test="type != null and type != ''">
					AND `type`=#{type}
				</if>
			</when>
			<otherwise>
				AND id=#{betId}
			</otherwise>
		</choose>
	</select>
	<!-- 将该条投注记录的开奖信息进行重置 -->
	<update id="correspondingGameBetsInfo" parameterType="map">
		UPDATE 
	  		game_bets 
	  	SET 
	  		is_cal = 0,
			cal_time = NULL,
			cal_msg = NULL,
			status = 3,
			action_date_result = NULL,
			bonus=0,
			get_count = NULL,
			get_result = NULL,
			update_time = NOW(),
			update_by = #{sysId},
			is_agent_rebate = 0
	  	WHERE
	  		game_bets.id = #{betId}
	</update>
	<!-- 将开奖奖金从用户账户回滚 -->
	<update id="correspondingUserInfo" parameterType="map">
		<!-- UPDATE 
	  		user_info u 
	  	SET 
	  		将中奖金额减去
	  		u.`COIN` = #{coinAfter}
	  	WHERE u.`UID`=#{uid} -->
		UPDATE 
	  		user_info u 
	  	SET 
	  		<!-- 将中奖金额减去 -->
	  		u.`COIN` = u.`COIN` - #{minusCoin}
	  	WHERE u.`UID`=#{uid}
	</update>
	<resultMap type="map" id="queryNumbersBettingMap">
		<id javaType="Integer" jdbcType="INTEGER" property="betId" column="id"/>
		<id javaType="java.lang.String" jdbcType="DECIMAL" property="betRebate" column="betRebate"/>
		<id javaType="java.lang.String" jdbcType="DECIMAL" property="betOdds" column="betOdds"/>
	</resultMap>
	<select id="queryNumbersBettingDetail" parameterType="map" resultMap="queryNumbersBettingMap">
		SELECT
			
			game_bets.`id`,
			game_bets.`type`,
			<!-- #logo -->
			game_type.show_name as gameName,<!-- #彩种 -->
			game_bets.action_issue AS actionIssue,<!-- #期号 -->
			game_bets.`bonus`,<!-- #中奖金额 -->
			game_bets.`status`,<!-- #中奖状态 -->
			game_bets.`is_cal` AS isCal,<!-- #开奖状态 -->
			game_bets.`times`,<!-- #倍数 -->
			ticket_status AS ticketStatus,<!-- #出票状态 -->
			game_bets.`open_no` AS openNo,<!-- #开奖号码 -->
			game_bets.`action_num` AS actionNum,<!-- #注数 -->
			game_bets.`action_data_str` AS actionData,<!-- #投注号码 -->
			game_bets.`orderId`,<!-- #订单号 -->
			game_bets.`action_time` AS actionTime,<!-- #投注时间 -->
			game_play_group.`groupName`,<!-- #二级玩法 -->
			game_played.`name` AS playedName,<!-- #三级玩法 -->
			game_bets.`amount`,<!-- #投注金额 -->
			game_bets.`bet_rebate` AS betRebate,<!-- #投注返点 -->
			game_bets.`bet_odds` AS betOdds<!-- #投注赔率 -->
		FROM 
		<choose>
			<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
				lshistory.`game_bets_his` game_bets
			</when>
			<otherwise>
				ls.`game_bets` game_bets
			</otherwise>
		</choose>
		LEFT JOIN ls.game_type ON game_bets.`type` = game_type.`gameID` 
			AND game_type.`status`=1
		LEFT JOIN ls.game_play_group ON game_bets.`played_group_id` = game_play_group.`id` 
			AND game_play_group.`status`=1
		LEFT JOIN ls.`game_played` ON game_played.`id`=game_bets.`playedid` 
			AND game_played.`status`=1 
		WHERE game_bets.id=#{betId}  and game_bets.game_type=1 LIMIT 1
	</select>
	<update id="prizeOperation" parameterType="map">
		INSERT INTO `ls`.`open_task_log` (
 			`match_type`,
  			`match_id`
			) 
		VALUES
  		(
  		<choose>
  			<when test="matchType != null and matchType != ''">
  				#{matchType},
  			</when>
  			<otherwise>
  				'BBMatchRecord',
  			</otherwise>
  		</choose>
   		 #{matchId}
 		 ) ON DUPLICATE KEY UPDATE 
 		 `dealNum` = NULL,
  		`dealErrorNum` = NULL,
 		 `dealTime` = NULL,
 		 `dealMsg` = NULL,
  		`open_state` = 0
	</update>
	<select id="getOpenTaskDigitInfo" parameterType="map" resultType="map">
		SELECT 
			open_data.one_type_id AS typeId,
			open_task_digit.id AS taskId,
			open_time AS openTime,
			open_data.issue AS actionIssue,
			open_data.luck_number AS luckNumber
		FROM ls.`open_data`
		LEFT JOIN ls.`open_task_digit` ON open_task_digit.issue=open_data.issue
			 AND open_data.one_type_id=open_task_digit.type
		WHERE open_data.`one_type_id`=#{typeId} AND open_data.`issue` = #{actionIssue} LIMIT 1
	</select>
	 
	<insert id="numberPrizeOperation" parameterType="map">
		INSERT INTO `ls`.`open_task_digit` (
		  `type`,
		  `issue`,
		  `open_time`,
		  `luck_number`,
		  `open_state`
		) 
		SELECT 
			open_data.one_type_id AS typeId,
			open_data.issue AS actionIssue,
			open_data.open_time AS openTime,
			open_data.luck_number AS luckNumber,
			0 AS openState
		FROM ls.`open_data`
		WHERE open_data.`one_type_id`=#{typeId} AND open_data.`issue` = #{actionIssue} LIMIT 1
	</insert>
	<!-- 手动开奖sql strat -->
	<select id="selectBetInfo" resultType="map">
		SELECT 
			game_bets.orderId,
			game_bets.playedid AS playedId,
			game_bets.action_num AS actionNum,
			game_bets.action_data_str AS actionDataStr,
			game_bets.amount,
			game_bets.bet_odds AS betOdds,
			game_bets.bet_rebate AS betRebate,
			game_bets.chase,
			game_bets.is_stop_chase  AS isStopChase,
			game_bets.before_orderId AS beforeOrderId,
			g1.is_cal AS beforeIsCal,
			g1.`status` AS beforeStatus,
			open_data.`luck_number` AS luckNumber
		FROM ls.game_bets
		LEFT JOIN ls.`game_bets` g1 ON g1.orderId = game_bets.`before_orderId`
		LEFT JOIN ls.`open_data` ON open_data.`issue` = game_bets.`action_issue` 
			AND open_data.`one_type_id` = game_bets.`type` AND open_data.`status`=1
		WHERE game_bets.id=#{betId} AND game_bets.is_cal = 0 
			AND game_bets.ticket_status = 1 AND game_bets.`status` = 3
	</select>
	<select id="selectGamePlayedInfo" resultType="string" parameterType="string">
		SELECT open_invok FROM game_played WHERE id = #{id}
	</select>
	<update id="updateGameBet" parameterType="map">
		UPDATE game_bets 
		<set>
			<if test="get_count != null and get_count != ''">
				get_count = #{get_count},
			</if>
			<if test="bonus != null and bonus != ''">
				bonus = #{bonus},
			</if>
			<if test="is_cal != null and is_cal != ''">
				is_cal = #{is_cal}, 	
			</if>
			<if test="update_time != null">
				update_time=#{update_time},
			</if>
			<if test="statu != null">
				`status`=#{statu},
			</if>
			<if test="open_no != null and open_no != ''">
				open_no=#{open_no},
			</if>
			<if test="cal_time != null">
				cal_time=#{cal_time},
			</if>
		</set>
		WHERE is_cal = 0 AND ticket_status = 1 AND `status` = 3
			<if test="orderId != null and orderId != ''">
				AND orderId = #{orderId}
			</if>
			<if test="chase != null and chase != '' and isStopChase == 1">
				AND chase = #{chase} AND is_stop_chase = 1  
			</if>
	</update>
	<!-- 手动开奖sql end -->
	<!-- 查询代理商返点记录 -->
	<select id="selectCoinLogByOrderId" parameterType="map" resultType="map">
		SELECT 
			order_id,
			user_type,
			trial_sign,
			uid,
			user_name,
			type,
			betid,
			playedGroupId,
			playedid,
			coin,
			26 AS coin_operate_type,
			'代理商返点回滚' AS info
		FROM coin_log
		WHERE order_id = #{orderId}
		AND coin_operate_type = 25
	</select>
	
	<insert id="correspondingProxy" parameterType="list" >
		<!--  UPDATE 
	  		user_info u 
	  	SET 
	  		将中奖金额减去
	  		u.`AGENT_COIN` = u.`AGENT_COIN` - #{coin}
	  	WHERE u.`UID`=#{uid} -->
	  	update user_info 
		    set  AGENT_COIN=
		    <foreach collection="list" item="item" index="index" 
		        separator=" " open="case UID" close="end">
		        when #{item.uid} then AGENT_COIN-#{item.coin}
		    </foreach>
		    ,COIN=
		    <foreach collection="list" item="item" index="index" 
		        separator=" " open="case UID" close="end">
		        when #{item.uid} then COIN-#{item.coin}
		    </foreach>
		    where UID in
		    <foreach collection="list" index="index" item="item" 
		        separator="," open="(" close=")">
		        #{item.uid,jdbcType=BIGINT}
		    </foreach>
	</insert>
	
	<insert id="insertProxyCancelCoinLog">
		INSERT INTO coin_log(
			order_id,
			user_type,
			trial_sign,
			uid,
			user_name,`type`,
			betid,
			playedGroupId,
			playedid,
			coin,
			userCoin,
			coin_before,
			fcoin,
			coin_operate_type,
			operate_time,
			info,
			operate_uid,
			operate_user)
			VALUES
		<foreach collection="list" item="item" index="index" open="" close="" separator=",">
				(#{item.order_id},
				#{item.user_type},
				#{item.trial_sign},
				#{item.uid},
				#{item.user_name},
				#{item.type},
				#{item.betid},
				#{item.playedGroupId},
				#{item.playedid},
				#{item.coin},
				(select coin from user_info where uid = #{item.uid}),
				(select coin from user_info where uid = #{item.uid}) + #{item.coin},
				(select fcion from user_info where uid = #{item.uid}),
				#{item.coin_operate_type},
				NOW(),
				#{item.info},
				#{item.sysId},
				#{item.sysName})
		</foreach>
	</insert>
	<select id="getRecentlyBetCensus" resultType="map">
		SELECT 
			SUM(IF(TO_DAYS(NOW()) = TO_DAYS(game_bets.`action_time`),game_bets.`amount`,0.00)) AS todaysBetSum,<!-- #今日投注 -->
			SUM(IF(game_bets.`is_cal`=1 AND game_bets.status = 1 AND TO_DAYS(NOW()) = TO_DAYS(game_bets.`cal_time`),game_bets.`bonus`,0.00)) AS todaysOpenSum,<!-- #今日派奖 -->
			SUM(IF(TO_DAYS(NOW()) - 1 = TO_DAYS(game_bets.`action_time`),game_bets.`amount`,0.00)) AS yesterdayBetSum,<!-- #昨日投注 -->
			SUM(IF(game_bets.`is_cal`=1 AND game_bets.status = 1 AND TO_DAYS(NOW()) - 1 = TO_DAYS(game_bets.`cal_time`),game_bets.`bonus`,0.00)) AS yesterdayOpenSum,<!-- #昨日派奖 -->
			SUM(IF(TO_DAYS(NOW()) - 7 &lt; TO_DAYS(game_bets.`action_time`),game_bets.`amount`,0.00)) AS sevenBetSum,<!-- #7天投注 -->
			SUM(IF(game_bets.`is_cal`=1 AND game_bets.status = 1 AND TO_DAYS(NOW()) - 7 &lt; TO_DAYS(game_bets.`cal_time`),game_bets.`bonus`,0.00)) AS sevenOpenSum<!-- #7天派奖 -->
		FROM ls.`game_bets`
		WHERE game_bets.status IN (0,1,3) and game_bets.game_type=1
	</select>
	<select id="getRecentlyDepositCensus" resultType="map">
		SELECT 
			SUM(IF(TO_DAYS(NOW()) = TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS todaysDepositSum,<!-- #今日充值 -->
			SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) = TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS todaysValidDepositSum,<!-- #今日有效充值 -->
			SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) - 1 = TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS yesterdayValidDepositSum,<!-- #昨日有效充值 -->
			SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) - 7 &lt; TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS sevenValidDepositSum<!-- #7日内有效充值 -->
		FROM ls.`member_deposit`
	</select>
	<select id="getRecentlyWithdrawCensus" resultType="map">
		SELECT 
			SUM(IF(TO_DAYS(NOW()) = TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS todaysWithdrawSum,<!-- #今日提现 -->
			SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) = TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS todaysValidWithdrawSum,<!-- #今日有效提现 -->
			SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) - 1 = TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS yesterdayValidWithdrawSum,<!-- #昨日有效提现 -->
			SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) - 7 &lt; TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS sevenValidWithdrawSum<!-- #7日内有效提现 -->
		FROM ls.`member_withdraw`
	</select>
	<select id="getRecentlyCoinUpdateCensus" resultType="map">
		SELECT * FROM (
			SELECT 
				SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) = TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS todaysValidDepositSum,<!-- #今日有效充值 -->
				SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) - 1 = TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS yesterdayValidDepositSum,<!-- #昨日有效充值 -->
				SUM(IF(member_deposit.`state` = 3 AND TO_DAYS(NOW()) - 7 &lt; TO_DAYS(member_deposit.`apply_time`),member_deposit.`amount`,0.00)) AS sevenValidDepositSum<!-- #7日内有效充值 -->
			FROM 
				ls.`member_deposit`) AS t1,
			(SELECT
				SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) = TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS todaysValidWithdrawSum,<!-- #今日有效提现 -->
			SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) - 1 = TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS yesterdayValidWithdrawSum,<!-- #昨日有效提现 -->
			SUM(IF(member_withdraw.`state` = 3 AND TO_DAYS(NOW()) - 7 &lt; TO_DAYS(member_withdraw.`apply_time`),member_withdraw.`amount`,0.00)) AS sevenValidWithdrawSum<!-- #7日内有效提现 -->
			FROM	
				ls.`member_withdraw`) AS t2
	</select>
</mapper>