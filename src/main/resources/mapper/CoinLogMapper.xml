<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lb.sys.dao.CoinLogMapper">
	<resultMap id="BaseResultMap" type="com.lb.member.model.CoinLog">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="order_id" jdbcType="BIGINT" property="orderId" />
		<result column="uid" jdbcType="BIGINT" property="uid" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="type" jdbcType="TINYINT" property="type" />
		<result column="user_type" jdbcType="TINYINT" property="userType" />
		<result column="betid" jdbcType="INTEGER" property="betid" />
		<result column="playedGroupId" jdbcType="INTEGER" property="playedgroupid" />
		<result column="coin" jdbcType="DECIMAL" property="coin" />
		<result column="userCoin" jdbcType="DECIMAL" property="usercoin" />
		<result column="coin_before" jdbcType="DECIMAL" property="coinBefore" />
		<result column="fcoin" jdbcType="DECIMAL" property="fcoin" />
		<result column="coin_operate_type" jdbcType="TINYINT" property="coinOperateType" />
		<result column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
		<result column="operate_ip" jdbcType="VARCHAR" property="operateIp" />
		<result column="operate_uid" jdbcType="BIGINT" property="operateUid" />
		<result column="operate_user" jdbcType="VARCHAR" property="operateUser" />
		<result column="info" jdbcType="VARCHAR" property="info" />
		<result column="inputTime" jdbcType="TIMESTAMP" property="inputtime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		id, order_id, user_type,uid, user_name, type, betid, playedGroupId,
		coin, userCoin, coin_before,
		fcoin, coin_operate_type, operate_time,
		operate_ip, operate_uid,
		operate_user, info,
		inputTime
	</sql>
	<select id="selectByExample" parameterType="com.lb.member.model.CoinLogExample"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from coin_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		select
		<include refid="Base_Column_List" />
		from coin_log
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		delete from coin_log
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.lb.member.model.CoinLogExample">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		delete from coin_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.lb.member.model.CoinLog">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		insert into coin_log (id, order_id, user_type,uid,
		user_name, type,
		betid,
		playedGroupId, coin, userCoin,
		coin_before, fcoin,
		coin_operate_type,
		operate_time, operate_ip, operate_uid,
		operate_user,
		info, inputTime
		)
		values (#{id,jdbcType=INTEGER},
		#{orderId,jdbcType=BIGINT},
		#{userType,jdbcType=TINYINT},#{uid,jdbcType=BIGINT},
		#{userName,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT},
		#{betid,jdbcType=INTEGER},
		#{playedgroupid,jdbcType=INTEGER},
		#{coin,jdbcType=DECIMAL}, #{usercoin,jdbcType=DECIMAL},
		#{coinBefore,jdbcType=DECIMAL}, #{fcoin,jdbcType=DECIMAL},
		#{coinOperateType,jdbcType=TINYINT},
		#{operateTime,jdbcType=TIMESTAMP}, #{operateIp,jdbcType=VARCHAR},
		#{operateUid,jdbcType=BIGINT},
		#{operateUser,jdbcType=VARCHAR},
		#{info,jdbcType=VARCHAR}, #{inputtime,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.lb.member.model.CoinLog">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		insert into coin_log
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="orderId != null">
				order_id,
			</if>
			<if test="userType != null">
				user_type,
			</if>
			<if test="uid != null">
				uid,
			</if>
			<if test="userName != null">
				user_name,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="betid != null">
				betid,
			</if>
			<if test="playedgroupid != null">
				playedGroupId,
			</if>
			<if test="coin != null">
				coin,
			</if>
			<if test="usercoin != null">
				userCoin,
			</if>
			<if test="coinBefore != null">
				coin_before,
			</if>
			<if test="fcoin != null">
				fcoin,
			</if>
			<if test="coinOperateType != null">
				coin_operate_type,
			</if>
			<if test="operateTime != null">
				operate_time,
			</if>
			<if test="operateIp != null">
				operate_ip,
			</if>
			<if test="operateUid != null">
				operate_uid,
			</if>
			<if test="operateUser != null">
				operate_user,
			</if>
			<if test="info != null">
				info,
			</if>
			<if test="inputtime != null">
				inputTime,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="orderId != null">
				#{orderId,jdbcType=BIGINT},
			</if>
			<if test="userType != null">
				#{userType,jdbcType=TINYINT},
			</if>
			<if test="uid != null">
				#{uid,jdbcType=BIGINT},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=TINYINT},
			</if>
			<if test="betid != null">
				#{betid,jdbcType=INTEGER},
			</if>
			<if test="playedgroupid != null">
				#{playedgroupid,jdbcType=INTEGER},
			</if>
			<if test="coin != null">
				#{coin,jdbcType=DECIMAL},
			</if>
			<if test="usercoin != null">
				#{usercoin,jdbcType=DECIMAL},
			</if>
			<if test="coinBefore != null">
				#{coinBefore,jdbcType=DECIMAL},
			</if>
			<if test="fcoin != null">
				#{fcoin,jdbcType=DECIMAL},
			</if>
			<if test="coinOperateType != null">
				#{coinOperateType,jdbcType=TINYINT},
			</if>
			<if test="operateTime != null">
				#{operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="operateIp != null">
				#{operateIp,jdbcType=VARCHAR},
			</if>
			<if test="operateUid != null">
				#{operateUid,jdbcType=BIGINT},
			</if>
			<if test="operateUser != null">
				#{operateUser,jdbcType=VARCHAR},
			</if>
			<if test="info != null">
				#{info,jdbcType=VARCHAR},
			</if>
			<if test="inputtime != null">
				#{inputtime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.lb.member.model.CoinLogExample"
		resultType="java.lang.Long">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		select count(*) from coin_log
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		update coin_log
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.orderId != null">
				order_id = #{record.orderId,jdbcType=BIGINT},
			</if>
			<if test="record.userType != null">
				userType = #{record.userType,jdbcType=TINYINT},
			</if>
			<if test="record.uid != null">
				uid = #{record.uid,jdbcType=BIGINT},
			</if>
			<if test="record.userName != null">
				user_name = #{record.userName,jdbcType=VARCHAR},
			</if>
			<if test="record.type != null">
				type = #{record.type,jdbcType=TINYINT},
			</if>
			<if test="record.betid != null">
				betid = #{record.betid,jdbcType=INTEGER},
			</if>
			<if test="record.playedgroupid != null">
				playedGroupId = #{record.playedgroupid,jdbcType=INTEGER},
			</if>
			<if test="record.coin != null">
				coin = #{record.coin,jdbcType=DECIMAL},
			</if>
			<if test="record.usercoin != null">
				userCoin = #{record.usercoin,jdbcType=DECIMAL},
			</if>
			<if test="record.coinBefore != null">
				coin_before = #{record.coinBefore,jdbcType=DECIMAL},
			</if>
			<if test="record.fcoin != null">
				fcoin = #{record.fcoin,jdbcType=DECIMAL},
			</if>
			<if test="record.coinOperateType != null">
				coin_operate_type =
				#{record.coinOperateType,jdbcType=TINYINT},
			</if>
			<if test="record.operateTime != null">
				operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.operateIp != null">
				operate_ip = #{record.operateIp,jdbcType=VARCHAR},
			</if>
			<if test="record.operateUid != null">
				operate_uid = #{record.operateUid,jdbcType=BIGINT},
			</if>
			<if test="record.operateUser != null">
				operate_user = #{record.operateUser,jdbcType=VARCHAR},
			</if>
			<if test="record.info != null">
				info = #{record.info,jdbcType=VARCHAR},
			</if>
			<if test="record.inputtime != null">
				inputTime = #{record.inputtime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		update coin_log
		set id = #{record.id,jdbcType=INTEGER},
		order_id =
		#{record.orderId,jdbcType=BIGINT},
		user_type =
		#{record.userType,jdbcType=TINYINT},
		uid =
		#{record.uid,jdbcType=BIGINT},
		user_name =
		#{record.userName,jdbcType=VARCHAR},
		type =
		#{record.type,jdbcType=TINYINT},
		betid =
		#{record.betid,jdbcType=INTEGER},
		playedGroupId =
		#{record.playedgroupid,jdbcType=INTEGER},
		coin =
		#{record.coin,jdbcType=DECIMAL},
		userCoin =
		#{record.usercoin,jdbcType=DECIMAL},
		coin_before =
		#{record.coinBefore,jdbcType=DECIMAL},
		fcoin =
		#{record.fcoin,jdbcType=DECIMAL},
		coin_operate_type =
		#{record.coinOperateType,jdbcType=TINYINT},
		operate_time =
		#{record.operateTime,jdbcType=TIMESTAMP},
		operate_ip =
		#{record.operateIp,jdbcType=VARCHAR},
		operate_uid =
		#{record.operateUid,jdbcType=BIGINT},
		operate_user =
		#{record.operateUser,jdbcType=VARCHAR},
		info =
		#{record.info,jdbcType=VARCHAR},
		inputTime =
		#{record.inputtime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.lb.member.model.CoinLog">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		update coin_log
		<set>
			<if test="orderId != null">
				order_id = #{orderId,jdbcType=BIGINT},
			</if>
			<if test="userType != null">
				user_type = #{userType,jdbcType=TINYINT},
			</if>
			<if test="uid != null">
				uid = #{uid,jdbcType=BIGINT},
			</if>
			<if test="userName != null">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=TINYINT},
			</if>
			<if test="betid != null">
				betid = #{betid,jdbcType=INTEGER},
			</if>
			<if test="playedgroupid != null">
				playedGroupId = #{playedgroupid,jdbcType=INTEGER},
			</if>
			<if test="coin != null">
				coin = #{coin,jdbcType=DECIMAL},
			</if>
			<if test="usercoin != null">
				userCoin = #{usercoin,jdbcType=DECIMAL},
			</if>
			<if test="coinBefore != null">
				coin_before = #{coinBefore,jdbcType=DECIMAL},
			</if>
			<if test="fcoin != null">
				fcoin = #{fcoin,jdbcType=DECIMAL},
			</if>
			<if test="coinOperateType != null">
				coin_operate_type = #{coinOperateType,jdbcType=TINYINT},
			</if>
			<if test="operateTime != null">
				operate_time = #{operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="operateIp != null">
				operate_ip = #{operateIp,jdbcType=VARCHAR},
			</if>
			<if test="operateUid != null">
				operate_uid = #{operateUid,jdbcType=BIGINT},
			</if>
			<if test="operateUser != null">
				operate_user = #{operateUser,jdbcType=VARCHAR},
			</if>
			<if test="info != null">
				info = #{info,jdbcType=VARCHAR},
			</if>
			<if test="inputtime != null">
				inputTime = #{inputtime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.lb.member.model.CoinLog">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Oct 11 
			19:42:52 CST 2017. -->
		update coin_log
		set order_id = #{orderId,jdbcType=BIGINT},
		uid =
		#{uid,jdbcType=BIGINT},
		user_type = #{userType,jdbcType=TINYINT},
		user_name = #{userName,jdbcType=VARCHAR},
		type =
		#{type,jdbcType=TINYINT},
		betid = #{betid,jdbcType=INTEGER},
		playedGroupId = #{playedgroupid,jdbcType=INTEGER},
		coin =
		#{coin,jdbcType=DECIMAL},
		userCoin = #{usercoin,jdbcType=DECIMAL},
		coin_before = #{coinBefore,jdbcType=DECIMAL},
		fcoin =
		#{fcoin,jdbcType=DECIMAL},
		coin_operate_type =
		#{coinOperateType,jdbcType=TINYINT},
		operate_time =
		#{operateTime,jdbcType=TIMESTAMP},
		operate_ip =
		#{operateIp,jdbcType=VARCHAR},
		operate_uid =
		#{operateUid,jdbcType=BIGINT},
		operate_user =
		#{operateUser,jdbcType=VARCHAR},
		info = #{info,jdbcType=VARCHAR},
		inputTime = #{inputtime,jdbcType=TIMESTAMP}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<select id="queryCoinLogList" resultType="map" parameterType="map">
		SELECT
		c.id,
		c.order_id AS orderId,
		c.user_type as userType,
		c.uid,
		c.user_name AS userName,
		c.type,
		c.betid,
		c.playedGroupId,
		c.coin,
		c.userCoin,
		c.coin_before AS coinBefore,
		c.fcoin,
		c.coin_operate_type AS
		coinOperateType ,
		c.operate_time AS operateTime,
		c.operate_ip AS
		operateIp,
		c.operate_uid AS operateUid,
		c.operate_user AS operateUser,
		c.info,
		c.inputTime,
		getItemName("CoinOperatetype",coin_operate_type) AS
		CoinOperateName
		FROM
		<choose>
			<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
				lshistory.`coin_log_his` c
			</when>
			<otherwise>
				ls.`coin_log` c
			</otherwise>
		</choose>
		LEFT JOIN user_info AS u ON c.uid = u.UID
		where 1=1
		<if test="orderId != null and orderId !=''">
			and c.order_id LIKE CONCAT(CONCAT('%',#{orderId}),'%')
		</if>
		<if test="agentCount != null and agentCount !=''">
			and u.AGENT_COUNT LIKE
			CONCAT(CONCAT('%',#{agentCount}),'%')
		</if>
		<if test="userType != null and userType !='' and userType==1">
			<!-- 代理与会员同属会员 -->
			and c.user_type in (1,2)
		</if>
		<if test="userType != null and userType !='' and userType==2">
			<!-- 测试 -->
			and c.user_type = 6
		</if>
		<if test="userName != null and userName !=''">
			and c.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="startTime != null and startTime != ''">
			and c.inputTime <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and c.inputTime <![CDATA[<=]]>
			#{endTime}
		</if>
		<if test="coinOperateType != null  and coinOperateType !=''">
			and c.coin_operate_type =
			#{coinOperateType,jdbcType=TINYINT}
		</if>
		ORDER BY c.inputTime DESC,c.id DESC
	</select>


	<!-- desc:财务报表数据统计 createTime:2017-10-21 -->
	<select id="queryFinanceList" resultType="com.lb.report.model.TeamCount"
		parameterType="map">
		select
		UID,
		USER_NAME,
		vipName,
		CONCAT(
		IFNULL( a.cashin_amount + a.hcashin_amount, 0 ),
		",",
		IFNULL( a.cashout_amount + a.hcashout_amount, 0 ),
		",",
		IFNULL( a.cashin_give + a.hcashin_give, 0 ),
		",",
		IFNULL( a.register_give + a.hregister_give, 0 ),
		",",
		IFNULL( a.active_give + a.hactive_give, 0 ),
		",",
		IFNULL( a.artificial_give + a.hartificial_give, 0 ),
		",",
		IFNULL( a.artificial_sub + a.hartificial_sub, 0 ) 
		) clog ,
		CONCAT(
		IFNULL(a.bet_num+a.hbet_num,0),
		",",
		IFNULL( a.bet_amount + a.hbet_amount, 0 ),
		",",
		IFNULL( a.bonus_amount + a.hbonus_amount, 0 ) 
		) gbet,
		(a.depositSum+a.hdepositSum)depositSum,
		(a.withdrawSum+a.hwithdrawSum)withdrawSum
		from
		(select
		UID,
		USER_NAME,
		vipName,
		depositSum,
		hdepositSum,
		withdrawSum,
		hwithdrawSum,
		substring_index(substring_index(clog,',',1),',',-1) as cashin_amount,
		substring_index(substring_index(clog,',',2),',',-1) as cashout_amount,
		substring_index(substring_index(clog,',',3),',',-1) as cashin_give,
		substring_index(substring_index(clog,',',4),',',-1) as register_give,
		substring_index(substring_index(clog,',',5),',',-1) as active_give,
		substring_index(substring_index(clog,',',6),',',-1) as
		artificial_give,
		substring_index(substring_index(clog,',',7),',',-1) as artificial_sub,
		substring_index(substring_index(hclog,',',1),',',-1) as
		hcashin_amount,
		substring_index(substring_index(hclog,',',2),',',-1) as hcashout_amount,
		substring_index(substring_index(hclog,',',3),',',-1) as hcashin_give,
		substring_index(substring_index(hclog,',',4),',',-1) as
		hregister_give,
		substring_index(substring_index(hclog,',',5),',',-1) as hactive_give,
		substring_index(substring_index(hclog,',',6),',',-1) as hartificial_give,
		substring_index(substring_index(hclog,',',7),',',-1) as
		hartificial_sub,
		substring_index( substring_index( gbet, ',', 1 ), ',',- 1 ) AS bet_num,
		substring_index( substring_index( gbet, ',', 2 ), ',',- 1 ) AS  bet_amount,
		substring_index( substring_index( gbet, ',', 3 ), ',',- 1 ) AS bonus_amount,
		substring_index( substring_index( hgbet, ',', 1 ), ',',- 1 ) AS hbet_num,
		substring_index( substring_index( hgbet, ',', 2 ), ',',- 1 ) AS hbet_amount, 
		substring_index( substring_index( hgbet, ',', 3 ), ',',- 1 ) AS hbonus_amount
		from
		(select
		uvf.vipName as vipName,
		u.user_name,
		u.uid,
		(SELECT
		CONCAT(
		<!-- 投注次数bSum -->
		IFNULL(sum(case when gb.status in (0,1)
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.action_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then 1 else 0 end),0),",",
		<!-- 投注额BetSum -->
		IFNULL(sum(case when gb.status in (0,1)
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.action_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then gb.amount else 0.00 end),0.00),",",
		<!-- 中奖额bonusSum -->
		IFNULL(sum(case when gb.status=1
		<if test="startTime != null and startTime != ''">
			and gb.cal_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.cal_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then gb.bonus else 0.00 end),0.00)
		)
		FROM
		ls.game_bets gb
		WHERE gb.uid = u.UID
		) as gBet,

		(SELECT
		CONCAT(
		<!-- 投注次数bSum -->
		IFNULL(sum(case when gb.status in (0,1)
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.action_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then 1 else 0 end),0),",",
		<!-- 投注额BetSum -->
		IFNULL(sum(case when gb.status in (0,1)
		<if test="startTime != null and startTime != ''">
			and gb.action_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.action_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then gb.amount else 0.00 end),0.00),",",
		<!-- 中奖额bonusSum -->
		IFNULL(sum(case when gb.status=1
		<if test="startTime != null and startTime != ''">
			and gb.cal_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and gb.cal_time <![CDATA[<=]]>
			#{endTime}
		</if>
		then gb.bonus else 0.00 end),0.00)
		)
		FROM
		lshistory.game_bets_his gb
		WHERE gb.uid = u.UID

		) as hgBet,

		(SELECT
		<!-- 充值总计 depositSum -->
		IFNULL(sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END),0.00)
		from
		<!-- <choose> <when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1"> 
			lshistory.member_deposit_his m </when> <otherwise> -->
		ls.coin_log m 
		<!-- </otherwise> </choose> -->
		WHERE m.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endTime}
		</if>
		) as depositSum,

		(SELECT
		<!-- 充值总计 depositSum -->
		IFNULL(sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END),0.00)
		from
		lshistory.coin_log_his m 
		WHERE m.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endTime}
		</if>
		) as hdepositSum,

		(SELECT
		<!-- 提现总计 withdrawSum -->
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ),0.00)
		from
		ls.coin_log m 
		WHERE <!-- m.user_type=2 and -->
		m.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endTime}
		</if>
		) as withdrawSum,

		(SELECT
		<!-- 提现总计 withdrawSum -->
		IFNULL(sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ),0.00)
		from
		lshistory.coin_log_his m 
		WHERE <!-- m.user_type=2 and -->
		m.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endTime}
		</if>
		) as hwithdrawSum,

		(SELECT
		CONCAT(
		<!-- 加款addMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type=6 then cl.coin else 0.00
		end),0.00),",",
		<!-- 减款 subtractMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type=7 then cl.coin else 0.00
		end),0.00),",",
		<!-- 赠送GivingMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type in (17,21) then cl.coin else
		0.00 end),0.00),",",
		<!-- 注册赠送regGivingSum -->
		IFNULL(sum(case when cl.coin_operate_type=4 then cl.coin else 0.00
		end),0.00),",",
		<!-- 充值赠送depositGivingSum -->
		IFNULL(sum(case when cl.coin_operate_type=10 then cl.coin else 0.00
		end),0.00),",",
		<!-- 活动奖励activityBonusCoin -->
		IFNULL(sum(case when cl.coin_operate_type in (5,14,22,23) then cl.coin
		else 0.00 end),0.00),",",
		<!-- 投注返利betRebate -->
		IFNULL(SUM(CASE WHEN cl.coin_operate_type = 27 THEN cl.coin ELSE 0.00
		END),0.00)
		)
		FROM
		ls.`coin_log` cl
		WHERE
		<!-- cl.user_type = 2 and -->
		cl.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and cl.inputTime <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and cl.inputTime <![CDATA[<=]]>
			#{endTime}
		</if>
		) as cLog,

		(SELECT
		CONCAT(
		<!-- 加款addMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type=6 then cl.coin else 0.00
		end),0.00),",",
		<!-- 减款 subtractMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type=7 then cl.coin else 0.00
		end),0.00),",",
		<!-- 赠送GivingMoneySum -->
		IFNULL(sum(case when cl.coin_operate_type in (17,21) then cl.coin else
		0.00 end),0.00),",",
		<!-- 注册赠送regGivingSum -->
		IFNULL(sum(case when cl.coin_operate_type=4 then cl.coin else 0.00
		end),0.00),",",
		<!-- 充值赠送depositGivingSum -->
		IFNULL(sum(case when cl.coin_operate_type=10 then cl.coin else 0.00
		end),0.00),",",
		<!-- 活动奖励activityBonusCoin -->
		IFNULL(sum(case when cl.coin_operate_type in (5,14,22,23) then cl.coin
		else 0.00 end),0.00),",",
		<!-- 投注返利betRebate -->
		IFNULL(SUM(CASE WHEN cl.coin_operate_type = 27 THEN cl.coin ELSE 0.00
		END),0.00)
		)
		FROM
		lshistory.`coin_log_his` cl
		WHERE
		<!-- cl.user_type = 2 and -->
		cl.uid = u.UID
		<if test="startTime != null and startTime != ''">
			and cl.inputTime <![CDATA[>=]]>
			#{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and cl.inputTime <![CDATA[<=]]>
			#{endTime}
		</if>
		) as hcLog

		from user_info u
		left join ls.user_vip_info uvf on
		u.vip_id=uvf.vipId
		where 1=1 and (u.USERTYPE=1 OR u.USERTYPE=2)
		<!-- where u.USERTYPE='NORMAL' -->
		<if test="userName !=null and userName !=''">
			and u.user_name like CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount !=null and agentCount !=''">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		GROUP BY u.uid
		)report
		)a
	</select>

	<!-- desc:财务报表历史数据统计 createTime:2017-10-23 -->
	<select id="queryHistoryFinanceList" resultType="map"
		parameterType="map">
		SELECT
		cl.uid AS uid,
		uf.user_name AS userName,
		uvf.vipName as vipName,
		SUM(IF(cl.coin_operate_type=1,cl.coin,0)) AS depositAmount,
		SUM(IF(cl.coin_operate_type=2,cl.coin,0)) AS cashOutAmount,
		(SUM(IF(cl.coin_operate_type=3,cl.coin,0))-SUM(IF(cl.coin_operate_type=12,cl.coin,0)))
		AS bettingAmount,
		SUM(IF(cl.coin_operate_type=4,cl.coin,0)) AS
		givingAmount,
		SUM(IF(cl.coin_operate_type=6,cl.coin,0)) AS
		artificialAddAmount,
		SUM(IF(cl.coin_operate_type=7,cl.coin,0)) AS
		artificialSubAmount,
		SUM(IF(cl.coin_operate_type=5,cl.coin,0)) AS
		redenvelopAmount,
		SUM(IF(cl.coin_operate_type=9,cl.coin,0)) AS
		sendPrizeAmount,
		SUM(IF(cl.coin_operate_type=10,cl.coin,0)) AS
		depositGivingAmount
		<!-- SUM(IF(cl.coin_operate_type=11,cl.coin,0)) AS depositGivingAmount -->
		FROM
		<choose>
			<when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1">
				lshistory.`coin_log_his` cl
			</when>
			<otherwise>
				ls.`coin_log` cl
			</otherwise>
		</choose>
		left join ls.user_info uf on cl.uid=uf.uid
		left join ls.user_vip_info
		uvf on uf.vip_id=uvf.vipId
		<!-- left join ls.game_bets AS gb ON gb.uid = cl.uid -->
		where <!-- uf.USERTYPE='NORMAL' -->
		1=1
		<if test="username!=null and username!=''">
			and cl.user_name like concat('%',#{username},'%')
		</if>
		<if test="startDate != null and startDate != ''">
			and DATE_FORMAT(cl.inputTime,'%Y-%m-%d') <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and DATE_FORMAT(cl.inputTime,'%Y-%m-%d') <![CDATA[<=]]>
			#{endDate}
		</if>
		GROUP BY cl.uid
		order by cl.inputTime desc
	</select>

	<!-- desc:查询统计当前上一个月各项总金额信息 createTime:2017-10-24 -->
	<select id="queryMonthsSumAmountInfo" resultType="map">
		SELECT
		DATE_FORMAT(cl.`inputTime`,'%Y-%m') AS years,
		SUM(IF(cl.coin_operate_type='2',cl.coin,0))AS cash_out_amount,
		SUM(IF(cl.coin_operate_type='3',cl.coin,0)) AS betting_amount,
		SUM(IF(cl.coin_operate_type='4',cl.coin,0)) AS register_giving_amount,
		SUM(IF(cl.coin_operate_type='6',cl.coin,0)) AS artificial_add_amount,
		SUM(IF(cl.coin_operate_type='7',cl.coin,0)) AS artificial_sub_amount,
		SUM(IF(cl.coin_operate_type='8',cl.coin,0)) AS return_amount,
		SUM(IF(cl.coin_operate_type='9',cl.coin,0)) AS deposits_amount,
		SUM(IF(cl.coin_operate_type='10',cl.coin,0)) AS send_prize_amount,
		SUM(IF(cl.coin_operate_type='11',cl.coin,0)) AS
		deposits_giving_amount,
		(
		SELECT
		count(*) bettingNum
		FROM game_bets gb
		WHERE
		<!-- gb.user_type='NORMAL' -->
		DATE_FORMAT(gb.`action_time`,'%Y-%m-%d')<![CDATA[>=]]>#{startDate}
		AND DATE_FORMAT(gb.`action_time`,'%Y-%m-%d')<![CDATA[<=]]>#{endDate}
		GROUP BY DATE_FORMAT(gb.`action_time`,'%Y-%m')
		) as betting_num,
		(SELECT (gb.amount-gb.bonus) AS loss_amount FROM (
		SELECT
		SUM(gb.amount) AS amount,
		SUM(IF(gb.status='1',gb.bonus,0)) AS bonus
		FROM game_bets gb WHERE
		<!-- gb.user_type='NORMAL' -->
		DATE_FORMAT(gb.`action_time`,'%Y-%m-%d')<![CDATA[>=]]>#{startDate}
		AND DATE_FORMAT(gb.`action_time`,'%Y-%m-%d')<![CDATA[<=]]>#{endDate}
		GROUP BY DATE_FORMAT(gb.`action_time`,'%Y-%m')
		) AS gb) AS loss_amount
		FROM coin_log cl
		WHERE
		<!-- cl.trial_sign = 'NORMAL' AND -->
		DATE_FORMAT(cl.`inputTime`,'%Y-%m-%d')<![CDATA[>=]]>#{startDate}
		AND DATE_FORMAT(cl.`inputTime`,'%Y-%m-%d')<![CDATA[<=]]>#{endDate}
		GROUP BY DATE_FORMAT(cl.`inputTime`,'%Y-%m')
	</select>
	
	<select id="getDepositList" resultType="com.lb.report.model.OperationAnalysis"
		parameterType="map">
		SELECT
		b.user_name,
		b.user_type,
		CONCAT( IFNULL(b.aa+b.haa, 0.00 ), ",", IFNULL(b.ab+b.hab, 0 ) ) AS mDeposit,
		CONCAT( IFNULL(b.ba+b.hba, 0.00 ), ",", IFNULL(b.bb+b.hbb, 0 ) ) AS mWithdraw
		FROM
		(SELECT
		a.user_name,
		a.user_type,
		substring_index(substring_index(mDeposit,',',1),',',-1) as aa,
		substring_index(substring_index(mDeposit,',',2),',',-1) as ab,
		substring_index(substring_index(hmDeposit,',',1),',',-1) as haa,
		substring_index(substring_index(hmDeposit,',',2),',',-1) as hab,
		substring_index(substring_index(mWithdraw,',',1),',',-1) as ba,
		substring_index(substring_index(mWithdraw,',',2),',',-1) as bb,
		substring_index(substring_index(hmWithdraw,',',1),',',-1) as hba,
		substring_index(substring_index(hmWithdraw,',',2),',',-1) as hbb
		FROM
		(SELECT
		u.user_name,u.usertype as user_type,
		(SELECT
		CONCAT(
		<!-- 充值总计 depositCount, 充值额depositAccount -->
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END ), 0.00 ),
		",",
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN 1 ELSE 0 END ), 0 ) 
		)
		from
			ls.coin_log m 
		WHERE m.uid = u.UID
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mDeposit,
		(
		SELECT
		CONCAT(
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END ), 0.00 ),
		",",
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN 1 ELSE 0 END ), 0 ) 
		)
		FROM
		lshistory.coin_log_his m
		WHERE
		m.uid = u.UID
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) AS hmDeposit,
		(SELECT
		CONCAT(
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ), 0.00 ),
		",",
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN 1 ELSE 0 END ), 0 ) 
		)
		from
		ls.coin_log m
		WHERE 
		m.uid = u.UID
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mWithdraw,
		(
		SELECT
		CONCAT(
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ), 0.00 ),
		",",
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN 1 ELSE 0 END ), 0 ) 
		)
		FROM
		lshistory.coin_log_his m
		WHERE
		m.uid = u.UID
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) AS hmWithdraw
		FROM
		user_info u
		where 1=1
		<if test="userType != null and userType != '' ">
			and u.usertype = #{userType}
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount != null and agentCount != '' ">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		GROUP BY u.uid)a)b
	</select>

	<select id="getDepositListTotal" resultType="com.lb.report.model.OperationAnalysis"
		parameterType="map">
		<!-- <choose> <when test="userType==2"> -->
		SELECT
		CONCAT( IFNULL( sum( a.deposit ), 0.00 ), ",", IFNULL( sum( a.num ), 0 ) )
		mDeposit,
		CONCAT( IFNULL( SUM( a.withdraw ), 0.00 ), ",", IFNULL( sum( a.wnum ), 0 ) )
		mWithdraw
		FROM
		(SELECT
		mDeposit.deposit,
		mDeposit.num,
		mWithdraw.withdraw,
		mWithdraw.wnum
		FROM
		(SELECT
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END  ), 0.00 )
		deposit,
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN 1 ELSE 0 END  ), 0 ) num
		from
		<!-- <choose> <when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1"> 
			lshistory.member_deposit_his m </when> <otherwise> -->
		ls.coin_log m
		<!-- </otherwise> </choose> -->
		LEFT JOIN user_info u on u.UID =m.uid
		where 1=1
		<if test="userType != null and userType != '' ">
			and u.USERTYPE =#{userType}
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount != null and agentCount != '' ">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mDeposit,
		(SELECT
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ), 0.00 )
		withdraw,
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN 1 ELSE 0 END ), 0 ) wnum
		from
		<!-- <choose> <when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1"> 
			lshistory.member_withdraw_his m </when> <otherwise> -->
		ls.coin_log m
		<!-- </otherwise> </choose> -->
		LEFT JOIN user_info u on <!-- m.user_type=2 and -->
		u.UID =m.uid
		where <!-- u.USERTYPE='NORMAL' -->
		1=1
		<if test="userType != null and userType != '' ">
			and u.USERTYPE =#{userType}
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount != null and agentCount != '' ">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mWithdraw

		union all

		SELECT
		mDeposit.deposit,
		mDeposit.num,
		mWithdraw.withdraw,
		mWithdraw.wnum
		FROM
		(SELECT
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN m.coin ELSE 0 END  ), 0.00 )
		deposit,
		IFNULL( sum( CASE WHEN m.coin_operate_type = 1 THEN 1 ELSE 0 END  ), 0 ) num
		from
		<!-- <choose> <when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1"> 
			lshistory.member_deposit_his m </when> <otherwise> -->
		lshistory.coin_log_his m
		<!-- </otherwise> </choose> -->
		LEFT JOIN user_info u on u.UID =m.uid
		where 1=1
		<if test="userType != null and userType != '' ">
			and u.USERTYPE =#{userType}
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount != null and agentCount != '' ">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mDeposit,
		(SELECT
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN m.coin ELSE 0 END ), 0.00 )
		withdraw,
		IFNULL( sum( CASE WHEN m.coin_operate_type = 2 THEN 1 ELSE 0 END ), 0 ) wnum
		from
		<!-- <choose> <when test="outOfThrity!=null and outOfThrity!='' and outOfThrity==1"> 
			lshistory.member_withdraw_his m </when> <otherwise> -->
		lshistory.coin_log_his m
		<!-- </otherwise> </choose> -->
		LEFT JOIN user_info u on <!-- m.user_type=2 and -->
		u.UID =m.uid
		where <!-- u.USERTYPE='NORMAL' -->
		1=1
		<if test="userType != null and userType != '' ">
			and u.USERTYPE =#{userType}
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%')
		</if>
		<if test="agentCount != null and agentCount != '' ">
			and u.AGENT_COUNT=#{agentCount}
		</if>
		<if test="startDate != null and startDate != ''">
			and m.operate_time <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			and m.operate_time <![CDATA[<=]]>
			#{endDate}
		</if>
		) as mWithdraw)a

	</select>
	<!-- <select id="getDepositList" resultType="map" parameterType="map"> <choose> 
		<when test="userType==2"> SELECT cl.user_name,cl.user_type, 充值次数 SUM(IF(cl.coin_operate_type=1,1,0)) 
		as depositCount, 取款次数 SUM(IF(cl.coin_operate_type=2,1,0)) as withdrawalCount, 
		充值额 SUM(IF(cl.coin_operate_type=1,cl.coin,0)) as depositAccount, 取款额 SUM(IF(cl.coin_operate_type=2,cl.coin,0)) 
		as withdrawalAcount, 盈亏额 SUM(IF(cl.coin_operate_type=1,cl.coin,0))-SUM(IF(cl.coin_operate_type=2,cl.coin,0)) 
		as balance FROM <choose> <when test="outOfThrity!=null and outOfThrity!='' 
		and outOfThrity==1"> lshistory.`coin_log_his` cl </when> <otherwise> ls.`coin_log` 
		cl </otherwise> </choose> LEFT JOIN user_info AS u ON cl.uid = u.UID where 
		cl.user_type=2 <if test="startDate != null and startDate != ''"> and cl.operate_time 
		<![CDATA[>=]]> #{startDate} </if> <if test="endDate !=null and endDate != 
		'' "> and cl.operate_time <![CDATA[<=]]> #{endDate} </if> <if test="userName 
		!= null and userName != '' "> and cl.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%') 
		</if> <if test="agentCount != null and agentCount != '' "> and u.AGENT_COUNT=#{agentCount} 
		</if> GROUP BY cl.uid </when> <otherwise> SELECT cl.user_name,cl.user_type, 
		取款次数 SUM(IF(cl.coin_operate_type=2,1,0)) as withdrawalCount, 取款额 SUM(IF(cl.coin_operate_type=2,cl.coin,0)) 
		as withdrawalAcount FROM coin_log cl LEFT JOIN proxy_info AS p ON cl.uid 
		= p.id where cl.user_type=1 <if test="startDate != null and startDate != 
		''"> and cl.operate_time <![CDATA[>=]]> #{startDate} </if> <if test="endDate 
		!=null and endDate != '' "> and cl.operate_time <![CDATA[<=]]> #{endDate} 
		</if> <if test="userName != null and userName != '' "> and cl.user_name LIKE 
		CONCAT(CONCAT('%',#{userName}),'%') </if> <if test="agentCount != null and 
		agentCount != '' "> and FIND_IN_SET(p.id, getProxyIdsByAcount(#{agentCount})) 
		</if> GROUP BY cl.uid </otherwise> </choose> </select> <select id="getDepositListTotal" 
		resultType="map" parameterType="map"> <choose> <when test="userType==2"> 
		SELECT 充值次数 SUM(IF(cl.coin_operate_type=1,1,0)) as depositCount, 取款次数 SUM(IF(cl.coin_operate_type=2,1,0)) 
		as withdrawalCount, 充值额 SUM(IF(cl.coin_operate_type=1,cl.coin,0)) as depositAccount, 
		取款额 SUM(IF(cl.coin_operate_type=2,cl.coin,0)) as withdrawalAcount, 盈亏额 SUM(IF(cl.coin_operate_type=1,cl.coin,0))-SUM(IF(cl.coin_operate_type=2,cl.coin,0)) 
		as balance FROM <choose> <when test="outOfThrity!=null and outOfThrity!='' 
		and outOfThrity==1"> lshistory.`coin_log_his` cl </when> <otherwise> ls.`coin_log` 
		cl </otherwise> </choose> LEFT JOIN user_info AS u ON cl.uid = u.UID where 
		cl.user_type=2 <if test="startDate != null and startDate != ''"> and cl.operate_time 
		<![CDATA[>=]]> #{startDate} </if> <if test="endDate !=null and endDate != 
		'' "> and cl.operate_time <![CDATA[<=]]> #{endDate} </if> <if test="userName 
		!= null and userName != '' "> and cl.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%') 
		</if> <if test="agentCount != null and agentCount != '' "> and u.AGENT_COUNT=#{agentCount} 
		</if> </when> <otherwise> SELECT 取款次数 SUM(IF(cl.coin_operate_type=2,1,0)) 
		as withdrawalCount, 取款额 SUM(IF(cl.coin_operate_type=2,cl.coin,0)) as withdrawalAcount 
		FROM coin_log cl LEFT JOIN proxy_info AS p ON cl.uid = p.id where cl.user_type=1 
		<if test="startDate != null and startDate != ''"> and cl.operate_time <![CDATA[>=]]> 
		#{startDate} </if> <if test="endDate !=null and endDate != '' "> and cl.operate_time 
		<![CDATA[<=]]> #{endDate} </if> <if test="userName != null and userName != 
		'' "> and cl.user_name LIKE CONCAT(CONCAT('%',#{userName}),'%') </if> <if 
		test="agentCount != null and agentCount != '' "> and FIND_IN_SET(p.id, getProxyIdsByAcount(#{agentCount})) 
		</if> </otherwise> </choose> </select> -->
	<select id="queryProxyRebateRatioDate" resultType="map"
		parameterType="map">
		SELECT
		<!--返点次数 -->
		IFNULL(SUM(IF(cl.coin_operate_type=25 and cl.coin<![CDATA[>=]]>0,1,0)),0.00)
		as rebateRatioCount,
		<!--返点金额次数 -->
		IFNULL(SUM(IF(cl.coin_operate_type=25,cl.coin,0)),0.00) as
		rebateRatioCoin
		FROM coin_log cl where <!-- cl.trial_sign='NORMAL' and -->
		cl.user_type=#{userType} and cl.user_name =
		#{userName,jdbcType=VARCHAR}

	</select>
	<insert id="addCoinLogRollBack" parameterType="map">
		INSERT INTO coin_log
		(
		user_type,
		uid,
		user_name,
		<!--变动金额 -->
		coin,
		<!-- 变动后金额 -->
		userCoin,
		<!-- 变动前金额 -->
		coin_before,
		coin_operate_type,
		operate_user,
		operate_ip,
		operate_time,
		operate_uid
		)
		VALUES
		(#{userType},#{uid},#{userName},#{coin},#{userCoin},coin+userCoin,#{coinOperateType},
		#{operateUser},#{operateIP},#{operateDate},#{operateUid})
	</insert>
	<select id="queryProxyByUserName" resultType="map"
		parameterType="string">
		SELECT
		p.id,
		p.proxy_name,
		p.bank_name,
		p.bank_account,
		p.bank_address,
		p.`login_account` AS userName,
		p.coin,
		p.fcion
		FROM
		proxy_info p
		WHERE p.`login_account`=#{userName}
	</select>
	<update id="updateProxyCoin" parameterType="map">
		update proxy_info set
		coin=coin+#{coin}
		where id=#{id}
	</update>


	<select id="getCoinOperateType" resultType="map">
		SELECT itemID,
		itemName FROM `code_library` WHERE codeID = 'CoinOperatetype' and
		status='1' ORDER BY itemID DESC
	</select>

	<!-- [批量投注返利回滚] —— 查询账变信息 -->
	<select id="qryUserRebateCoinLog" parameterType="String"
		resultType="map">
		SELECT
		u.UID,u.USER_NAME,u.USERTYPE,u.COIN,u.FCION,
		c.order_id AS 'ORDER_ID',(-c.coin) AS 'CHANGE_COIN',
		(u.COIN-c.coin) AS 'NOW_COIN',u.COIN AS 'COIN_BEFORE'
		FROM coin_log c , user_info u
		WHERE c.coin_operate_type=27 AND u.UID = c.uid AND u.STATUS=1 AND
		c.order_id=#{batch_no};
	</select>

	<!-- [批量投注返利回滚] —— 批量记录回滚账变 -->
	<insert id="insertOfURebateRollback" parameterType="list">
		INSERT INTO ls.coin_log
		(
		`uid`,`user_name`,
		`order_id`, `user_type`, `trial_sign`,`type`,
		`coin`, `userCoin`, `coin_before`, `fcoin`,
		`coin_operate_type`, `info`
		)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(
			#{item.UID},#{item.USER_NAME},
			#{item.ORDER_ID}, #{item.USERTYPE}, '1','0',
			#{item.CHANGE_COIN}, #{item.NOW_COIN}, #{item.COIN_BEFORE},#{item.FCION},
			'28', '投注返利回滚'
			)
		</foreach>
	</insert>
</mapper>